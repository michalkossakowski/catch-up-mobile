@page "/feedback"

@inject HttpClient _httpClient
@inject CatchUpLocalDb _localDb
@inject NavigationManager NavigationManager

@using catch_up_mobile.Dtos
@using catch_up_mobile.Enums
@using catch_up_mobile.SQLite
@using CommunityToolkit.Maui.Alerts

<div class="container text-center">
    <h3>FeedbackPage</h3>
    @if (feedbacks == null)
    {
        <Loading />
    }
    else
    {
        if (offlineMode)
        {
            <div class="alert alert-primary" role="alert">
                You are working in offline mode
            </div>
        }

        <div class="accordion text-start mt-3 mb-3" id="accordionExample">
            @if (feedbacks.Count() == 0)
            {
                <div class="alert alert-warning" role="alert">
                    No Feedbacks found
                </div>
            }
            @for (int i = 0; i < feedbacks.Count; i++)
            {
                var feedback = feedbacks[i];
                var collapseId = $"collapse{i}";
                var headingId = $"heading{i}";

                <div class="accordion-item">
                    <h2 class="accordion-header" id="@headingId">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                            <strong>@(i + 1). @feedback.Title</strong>
                        </button>
                    </h2>
                    <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headingId" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                                @if (isAdmin)
                                {
                                <strong>Sender:</strong>
                                <ul><li>@GetUserFullName(feedback.SenderId)</li></ul>

                                }
                                else
                                {
                                    <strong>Receiver:</strong>
                                    <ul><li>@GetUserFullName(feedback.ReceiverId)</li></ul>
                                }
                                <strong>Description:</strong>
                                <ul><li>@feedback.Description</li></ul>

                                <strong>Date:</strong>
                                <ul><li>@feedback.createdDate.ToString("dd MMM yyyy")</li></ul>

                                <strong>Resource type:</strong>
                                <ul><li>@feedback.ResourceType</li></ul>

                                <strong>Resource title:</strong>
                                <ul><li>@GetResourceTitle(feedback.ResourceType, feedback.ResourceId)</li></ul>
                            @if (isAdmin && !offlineMode)
                            {
                                <div>
                                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal" @onclick="() => feedbackToDelete = feedback">
                                        Delete
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<div class="modal fade text-center" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h5>Are you sure you want to delete this Feedback ?</h5>
                <div class="card p-2"><strong>@feedbackToDelete?.Title</strong></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="ConfirmDeleteFaq">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<FeedbackDto> feedbacks;
    private FeedbackDto feedbackToDelete;
    private bool offlineMode = true;
    private bool isAdmin = true;
    private List<FaqDto> faqs;
    private List<UserDto> users;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            feedbacks = await _httpClient.GetFromJsonAsync<List<FeedbackDto>>("api/feedback/GetAll");

            faqs = await _httpClient.GetFromJsonAsync<List<FaqDto>>("api/faq/GetAll");

            users = await _httpClient.GetFromJsonAsync<List<UserDto>>("api/user/GetAll");

            await _localDb.DeleteAllFeedbacksAsync();
            foreach (var feedback in feedbacks)
                await _localDb.AddFeedbackAsync(feedback);

            offlineMode = false;
        }
        catch (Exception)
        {
            feedbacks = await _localDb.GetFeedbacksAsync();
            faqs = await _localDb.GetFaqsAsync();
            offlineMode = true;
        }
    }

    private string GetUserFullName(Guid userId)
    {
        var user = users?.FirstOrDefault(u => u.Id == userId);
        return user != null ? $"{user.Name} {user.Surname}" : "Unknown User";
    }

    private string GetResourceTitle(ResourceTypeEnum resourceType, int resourceId)
    {
        if (resourceType == ResourceTypeEnum.Faq)
        {
            var faq = faqs?.FirstOrDefault(f => f.Id == resourceId);
            return faq?.Title ?? "No title";
        }

        return "No title";
    }

    private async Task ConfirmDeleteFaq()
    {
        if (feedbackToDelete != null)
        {
            await _httpClient.DeleteAsync($"api/feedback/delete/{feedbackToDelete.Id}");
            await _localDb.DeleteFeedbackAsync(feedbackToDelete);
            feedbacks.Remove(feedbackToDelete);
            feedbackToDelete = null;
            await Toast.Make("Feedback successfully deleted").Show();
        }
    }
}
