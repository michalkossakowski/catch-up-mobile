@page "/faq"

@inject HttpClient _httpClient
@inject CatchUpLocalDb _localDb
@inject NavigationManager NavigationManager

@using catch_up_mobile.Dtos
@using catch_up_mobile.SQLite
@using catch_up_mobile.Enums
@using CommunityToolkit.Maui.Views
@using CommunityToolkit.Maui.Alerts
@using catch_up_mobile.Components.Pages.MaterialManager

<div class="container text-center">
    <h2>Frequently Asked Questions</h2>

    @if (faqs == null)
    {
        <Loading />
    }
    else
    {
        if (offlineMode)
        {
            <div class="alert alert-primary" role="alert">
                <i class="bi bi-info-circle"></i> You are working in offline mode
            </div>
        }
        if (!faqs.Any())
        {
            <div class="alert alert-secondary text-center" role="alert">
                FAQ list is empty
            </div>
        }
        else
        {
            <div class="mt-3 mb-3 text-center">
                <input class="form-control" placeholder="Search for FAQ ..." @oninput="OnSearchQueryChanged">
            </div>
            <div class="accordion text-start mt-3 mb-3" id="accordionExample">
                @for (int i = 0; i < filteredFaqs.Count; i++)
                {
                    var faq = filteredFaqs[i];
                    var collapseId = $"collapse{i}";
                    var headingId = $"heading{i}";

                    <div class="accordion-item">
                        <h2 class="accordion-header" id="@headingId">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                                <strong>@(i + 1). @faq.Question</strong>
                            </button>
                        </h2>
                        <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headingId" data-bs-parent="#accordionExample">
                            <div class="accordion-body">
                                @faq.Answer
                                @if (faq.MaterialId != null)
                                {
                                    <br />
                                    <br />
                                    <p>Additional Materials:</p>

                                    @if (!offlineMode)
                                    {
                                        <div class="m-2">

                                            <MaterialItem materialId=faq.MaterialId
                                            showRemoveFile="false"
                                            showDownloadFile="true"
                                            showAddingFile="false" />
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="alert alert-warning text-center" role="alert">
                                            <i class="bi bi-exclamation-triangle"></i> Materials are avaliable only in online mode
                                        </div>
                                    }
                                }

                                @if (isAdmin && !offlineMode)
                                {
                                    <div class="d-flex mt-3 mb-3 btn-group">
                                        <button type="button" class="btn btn-primary w-50" @onclick="() => OpenFaqEdit(faq.Id)">Edit</button>
                                        <button type="button" class="btn btn-danger w-50" @onclick="() => DeleteFaq(faq)">Delete</button>
                                    </div>
                                }

                                @if (!isAdmin && !offlineMode)
                                {
                                    <div class="d-flex mt-3 mb-3 btn-group ">
                                        <button type="button" class="btn btn-info" @onclick="() => NavigateToFeedback(faq.Id)">Feedback</button>
                                    </div>
                                }
                                else
                                {
                                    @if (!isAdmin)
                                    {
                                        <div class="alert alert-warning text-center" role="alert">
                                        <i class="bi bi-exclamation-triangle"></i> You cannot send feedback in offline mode
                                        </div>
                                    }
                                    
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
        if (isAdmin)
        {
            if (!offlineMode)
            {
                <div class="d-flex mt-3 mb-3 btn-group ">
                    <button type="button" class="btn btn-primary" @onclick="OpenFaqAdd">Add new FAQ</button>
                </div>
            }
            else
            {
                <div class="alert alert-warning text-center" role="alert">
                    <i class="bi bi-exclamation-triangle"></i> You cannot add/edit/delete FAQ in offline mode
                </div>
            }
        }
    }
</div>

@code {
    private List<FaqDto> faqs;
    private List<FaqDto> filteredFaqs;
    private bool offlineMode = true;
    private bool isAdmin = false; 
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserDto user = await _localDb.GetUserAsync();
            var userRoleResonse = await _httpClient.GetAsync($"api/User/GetRole/{user.Id}");
            isAdmin = await userRoleResonse.Content.ReadAsStringAsync() == "Admin";

            var response = await _httpClient.GetAsync("api/faq/GetAll", HttpCompletionOption.ResponseHeadersRead);

            if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                faqs = new List<FaqDto>();
            }
            else if (response.IsSuccessStatusCode)
            {
                faqs = await response.Content.ReadFromJsonAsync<List<FaqDto>>();
                await _localDb.DeleteAllFaqsAsync();
                foreach (var faq in faqs)
                    await _localDb.AddFaqAsync(faq);
            }

            offlineMode = false;
        }
        catch (HttpRequestException ex)
        {
            faqs = await _localDb.GetFaqsAsync();
            offlineMode = true;
        }
        filteredFaqs = faqs;
    }

    private void OpenFaqAdd()
    {
        NavigationManager.NavigateTo("/faq/edit");
    }

    private void OpenFaqEdit(int faqId)
    {
        NavigationManager.NavigateTo($"/faq/edit/{faqId}");
    }

    private void DeleteFaq(FaqDto faqToDelete)
    {
        var popup = new ConfirmPopup($"Do you want to send this FAQ?", (isConfirmed) =>
        {
            if (isConfirmed)
            {
                _httpClient.DeleteAsync($"api/faq/delete/{faqToDelete.Id}");
                _localDb.DeleteFaqAsync(faqToDelete);
                faqs.Remove(faqToDelete);
                filteredFaqs = faqs;
                faqToDelete = null;
                Toast.Make("FAQ successfully deleted").Show();
                StateHasChanged();
            }
            else
            {
                Toast.Make("FAQ deletion canceled").Show();
            }
        });
        App.Current.MainPage.ShowPopup(popup);
    }

    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        FilterFaqs();
    }

    private void FilterFaqs()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredFaqs = faqs.ToList();
        }
        else
        {
            filteredFaqs = faqs
                .Where(f => f.Question.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void NavigateToFeedback(int faqId)
    {
        try
        {
            var url = $"/feedback/add?resourceType={(int)ResourceTypeEnum.Faq}&resourceId={faqId}";
            NavigationManager.NavigateTo(url);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Navigation error: {ex.Message}");
        }
    }
}
