@inject IJSRuntime JS

<div class="setting-container">
    <h3>Theme:</h3>
    <div class="setting-row">

        <div class="p-3 m-0 border-0 bd-example m-0 border-0">
            <input type="radio" class="btn-check " name="options" id="option1" autocomplete="off" @onchange=' () => ToggleTheme("catchUpAuto")' checked="@(currentTheme == "catchUpAuto")">
            <label class="btn btn-outline-success" for="option1">Auto</label>

            <input type="radio" class="btn-check" name="options" id="option2" autocomplete="off" @onchange=' () => ToggleTheme("catchUpDay")' checked="@(currentTheme == "catchUpDay")">
            <label class="btn btn-outline-success" for="option2">Light</label>

            <input type="radio" class="btn-check" name="options" id="option3" autocomplete="off" @onchange=' () => ToggleTheme("catchUpNight")' checked="@(currentTheme == "catchUpNight")">
            <label class="btn btn-outline-success" for="option3">Dark</label>
        </div>
    </div>
</div>

@code {
    private string currentTheme = "catchUpAuto";

    protected override async Task OnInitializedAsync()
    {
        var savedTheme = await JS.InvokeAsync<string>("localStorage.getItem", "theme");
        var isAuto = await JS.InvokeAsync<string>("localStorage.getItem", "autoTheme");
        if (isAuto == "yes")
        {
            currentTheme = "catchUpAuto";
        }
        else if (savedTheme == "catchUpNight")
        {
            currentTheme = "catchUpNight";
        }
        else
        {
            currentTheme = "catchUpDay";
        }
    }

    private async Task ToggleTheme(string theme)
    {
        currentTheme = theme;
        if (theme == "catchUpAuto")
        {
            await JS.InvokeAsync<string>("changeAutoTheme", "yes");
        }
        else
        {
            //string newTheme = isDarkMode ? "catchUpNight" : "catchUpDay";
            await JS.InvokeVoidAsync("changeAutoTheme", "no");
            await JS.InvokeVoidAsync("changeTheme", theme);
        }
    }
}