@page "/localization-test"
@inject IJSRuntime JSRuntime
@inject CatchUpLocalDb _localDb
@using Microsoft.Maui.ApplicationModel
@using Microsoft.Maui.Devices.Sensors
@using System.Text.Json
@using CommunityToolkit.Maui.Alerts
@using Dtos
@using catch_up_mobile.SQLite

<div class="container mt-4">
    <h1 class="text-center">City Localization Test</h1>

    <div class="d-flex justify-content-center mb-3">
        <button class="btn btn-primary" @onclick='() => CompanyLocator.GetLocation(_localDb)'>Check your city</button>
    </div>
    <p class="text-center">@CompanyLocator.locationMessage</p>

    <div class="row">
        <div class="col-12 col-md-6">
            <h3>Actions</h3>
            <button class="btn btn-primary mb-2" @onclick="AddCity">Add City</button>
            <button class="btn btn-danger mb-2" @onclick="DeleteAllCities">Delete All Cities</button>
        </div>
        <div class="col-12 col-md-6">
            <h3>Response</h3>
            <p>@responseMessage</p>
            <ul>
                @if (cities != null && cities.Count > 0)
                {
                    @foreach (var city in cities)
                    {
                        <li>@city.cityName (Lat: @city.Latitude, Lng: @city.Longitude, Radius: @city.RadiusKm km)</li>
                    }
                }
                else
                {
                    <li>No cities available.</li>
                }
            </ul>
        </div>
        <div class="col-12 col-md-6">
            <h3>Add New City</h3>
            <div class="mb-3">
                <label for="cityName" class="form-label">City Name</label>
                <input type="text" class="form-control" id="cityName" @bind="newCity.cityName">
            </div>
            <div class="mb-3">
                <label for="latitude" class="form-label">Latitude</label>
                <input type="number" class="form-control" id="latitude" @bind="newCity.Latitude">
            </div>
            <div class="mb-3">
                <label for="longitude" class="form-label">Longitude</label>
                <input type="number" class="form-control" id="longitude" @bind="newCity.Longitude">
            </div>
            <div class="mb-3">
                <label for="radiusKm" class="form-label">Radius (Km)</label>
                <input type="number" class="form-control" id="radiusKm" @bind="newCity.RadiusKm">
            </div>
        </div>
    </div>
</div>

@code {
    private List<CompanyCityDto> cities = new List<CompanyCityDto>();
    private string responseMessage = string.Empty;

    private CompanyCityDto newCity = new CompanyCityDto();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (_localDb == null)
            {
                responseMessage = "Database service (_localDb) is not available.";
                return;
            }

            cities = await _localDb.GetCitiesAsync();
            responseMessage = $"Loaded {cities.Count} city/cities on initialization.";
        }
        catch (Exception ex)
        {
            responseMessage = "Error during page initialization: " + ex.Message;
        }
    }

    private async Task GetCityList()
    {
        try
        {
            if (_localDb == null)
            {
                responseMessage = "Database service (_localDb) is not available.";
                return;
            }

            cities = await _localDb.GetCitiesAsync();
            responseMessage = $"Fetched {cities.Count} city/cities from the database.";
        }
        catch (Exception ex)
        {
            responseMessage = "Error fetching city list: " + ex.Message;
        }
    }
    /*
            name  Latitude  Longitude Radius(Km)
        { "Warsaw", (52.2297, 21.0122, 15) },
        { "Krakow", (50.0647, 19.9450, 7) },
        { "Gdansk", (54.3520, 18.6466, 8) },
        { "Wroclaw", (51.1079, 17.0385, 8) },
        { "Poznan", (52.4064, 16.9252, 10) },
        { "Lodz", (51.7592, 19.4560, 10) },
        { "Szczecin", (53.4285, 14.5528, 10) },
        { "Bialystok", (53.1325, 23.1688, 7) },
        { "Katowice", (50.2649, 19.0238, 7) }
     */
    private async Task AddCity()
    {
        try
        {
            if (_localDb == null)
            {
                responseMessage = "Database service (_localDb) is not available.";
                return;
            }

            if (string.IsNullOrEmpty(newCity.cityName))
            {
                responseMessage = "City name cannot be empty.";
                return;
            }

            int result = await _localDb.AddCityAsync(newCity);
            responseMessage = result > 0 ? "City added successfully!" : "Failed to add city.";
            await GetCityList(); 
        }
        catch (Exception ex)
        {
            responseMessage = "Error adding city: " + ex.Message;
        }
    }

    private async Task DeleteAllCities()
    {
        try
        {
            if (_localDb == null)
            {
                responseMessage = "Database service (_localDb) is not available.";
                return;
            }

            await _localDb.DeleteAllCitiesAsync();
            responseMessage = "All cities have been deleted.";
            await GetCityList();
        }
        catch (Exception ex)
        {
            responseMessage = "Error deleting all cities: " + ex.Message;
        }
    }
}
