@page "/tasks"

@inject HttpClient _httpClient
@inject CatchUpDbContext _dbContext
@inject NavigationManager NavigationManager

@using catch_up_mobile.SQLite
@using catch_up_mobile.Dtos
@using catch_up_mobile.Enums
<h3>Tasks</h3>


@if (isLoading)
{
    <div class="text-center">
        <Loading />
    </div>
}
else
{
    @if (cards != null && cards.Count == 0)
    {
        <div class="alert alert-warning" role="alert">
            No tasks found
        </div>
    }
    else
    {
        <div class="mt-3 mb-3 text-center">
            <input class="form-control" placeholder="Search for Task ..." @oninput="OnSearchQueryChanged">
        </div>
        <select class="form-select" @onchange="OnStatusChanged">
            <option value="">Select Status</option>
            @foreach (var status in Enum.GetValues(typeof(StatusEnum)))
            {
                <option value="@status">@GetStatusText((StatusEnum)status)</option>
            }
        </select>
        <select class="form-select" @onchange="OnUserChanged">
            @if (userRole != null)
            {
                @if (userRole.ToLower() == "newbie")
                {
                    <option value="">Select Mentor</option>
                }
                else
                {
                    <option value="">Select Newbie</option>
                }

            }
            else
            {
                <option value="">Select Newbie</option>
            }


            @foreach (var user in availableUsers)
            {
                <option value="@user.Id">@user.Name @user.Surname</option>
            }
        </select>
        <div class="tasks-container">
            @foreach (var card in filteredCards)
            {
                <div class="task-card shadow-sm" @onclick="() => GoToDedails(card.FullTask.Id)">
                    <div class="task-card-body">
                        <h5 class="task-title">@card.FullTask.Title</h5>
                        <p class="task-user">
                            <i class="bi bi-person-fill"></i> @card.FullTask.NewbieName
                        </p>
                    </div>
                    <div class="task-status @GetStatusClass(card.FullTask.Status)">
                        <span class="status-text">@GetStatusText(card.FullTask.Status)</span>
                    </div>
                </div>
            }
        </div>
    }
    if (!isOnline)
    {
        <div class="alert alert-primary" role="alert">
            <i class="bi bi-info-circle"></i> You are in offline mode
        </div>
    }
}




@code {
    private List<Card> cards;
    private List<Card> filteredCards;
    private List<UserDto> availableUsers = new List<UserDto>();
    private UserDto currentUser;
    private bool isOnline = false;
    private bool isLoading = true;
    private string searchQuery = string.Empty;
    private StatusEnum? selectedStatus = null;
    private Guid? selectedUserId = null;

    private string userRole;
    protected override async Task OnInitializedAsync()
    {
        cards = new List<Card>();
        currentUser = await _dbContext.GetUserAsync();
        List<FullTask> fullTasks = new List<FullTask>();
        try
        {
            var response = await _httpClient.GetAsync($"api/User/GetRole/{currentUser.Id}");
            userRole = await response.Content.ReadAsStringAsync();

            if (userRole.ToLower() == "mentor")
            {
                fullTasks = await _httpClient.GetFromJsonAsync<List<FullTask>>($"api/Task/GetAllFullTasksByAssigningId/{currentUser.Id}");
            }
            else if (userRole.ToLower() == "newbie")
            {
                fullTasks = await _httpClient.GetFromJsonAsync<List<FullTask>>($"api/Task/GetAllFullTasksByNewbieId/{currentUser.Id}");
            }
            else if (userRole.ToLower() == "admin")
            {
                fullTasks = await _httpClient.GetFromJsonAsync<List<FullTask>>($"api/Task/GetAllFullTasks");
            }

            try
            {
                if (userRole.ToLower() == "mentor")
                {
                    availableUsers = await _httpClient.GetFromJsonAsync<List<UserDto>>($"api/NewbieMentor/GetUsers?role=Newbie&assigned=true&relatedId={currentUser.Id}") ?? new List<UserDto>();
                }
                else if (userRole.ToLower() == "newbie")
                {
                    availableUsers = await _httpClient.GetFromJsonAsync<List<UserDto>>($"api/NewbieMentor/GetUsers?role=Mentor&assigned=true&relatedId={currentUser.Id}") ?? new List<UserDto>();
                }
                else if (userRole.ToLower() == "admin")
                {
                    availableUsers = await _httpClient.GetFromJsonAsync<List<UserDto>>($"api/User/GetAll") ?? new List<UserDto>();
                }
            }
            catch { }

        }
        catch (HttpRequestException ex)
        {
            isOnline = false;

            var fullTasksOffline = await _dbContext.GetTasksForUserAsync(currentUser.Id);
            cards = new List<Card>();
            foreach (var fullTask in fullTasksOffline)
            {
                Card newCard = new Card();
                newCard.FullTask = fullTask;
                newCard.Name = fullTask.NewbieName;
                cards.Add(newCard);
            }
            filteredCards = cards;
            isLoading = false;
            return;
        }

        isOnline = true;


        foreach (var fullTask in fullTasks)
        {
            var response = await _dbContext.UpdateTaskAsync(fullTask);
            if (response == 0)
            {
                await _dbContext.AddTaskAsync(fullTask);
            }

            Card newCard = new Card();
            newCard.FullTask = fullTask;
            newCard.Name = fullTask.NewbieName;
            cards.Add(newCard);

        }
        filteredCards = cards;


        isLoading = false;
    }

    private void GoToDedails(int fullTaskId)
    {
        NavigationManager.NavigateTo($"/task/{fullTaskId}");
    }
    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        FilterTasks();
    }
    private void OnStatusChanged(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();

        if (string.IsNullOrEmpty(selectedValue)) // Jeśli wartość jest null lub pusta
        {
            selectedStatus = null; // Przypisz null do selectedStatus
        }
        else if (Enum.TryParse(typeof(StatusEnum), selectedValue, out var result)) // Jeśli wartość odpowiada enumowi
        {
            selectedStatus = (StatusEnum?)result; // Przypisz wartość enum do selectedStatus
        }

        FilterTasks(); // Filtruj zadania zgodnie z wybranym statusem
    }
    private void OnUserChanged(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();
        selectedUserId = string.IsNullOrEmpty(selectedValue) ? null : Guid.Parse(selectedValue);

        FilterTasks();
    }

    private async Task FilterTasks()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredCards = cards.ToList();
        }
        else
        {
            filteredCards = cards
                .Where(f => f.FullTask.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        if (selectedStatus.HasValue)
        {
            filteredCards = filteredCards
                .Where(s => s.FullTask.Status == selectedStatus.Value)
                .ToList();
        }
        if (selectedUserId.HasValue)
        {
            if (isOnline && userRole != null)
            {
                if (userRole.ToLower() == "newbie")
                {
                    filteredCards = filteredCards
                        .Where(s => s.FullTask.AssigningId == selectedUserId.Value)
                        .ToList();
                }
                else
                {
                    filteredCards = filteredCards
                        .Where(s => s.FullTask.NewbieId == selectedUserId.Value)
                        .ToList();
                }
            }
            else if (isOnline)
            {
                filteredCards = filteredCards
                        .Where(s => s.FullTask.AssigningId == selectedUserId.Value || s.FullTask.NewbieId == selectedUserId.Value)
                        .ToList();
            }

        }
    }
    private string GetStatusText(StatusEnum status)
    {
        switch (status)
        {
            case StatusEnum.ToDo:
                return "To Do";
            case StatusEnum.InProgress:
                return "In Progress";
            case StatusEnum.ToReview:
                return "To Review";
            case StatusEnum.ReOpen:
                return "Reopen";
            case StatusEnum.Done:
                return "Done";
        }
        return "";
    }

    private string GetStatusClass(StatusEnum status)
    {
        switch (status)
        {
            case StatusEnum.ToDo:
                return "status-todo";
            case StatusEnum.InProgress:
                return "status-inprogress";
            case StatusEnum.ToReview:
                return "status-toreview";
            case StatusEnum.ReOpen:
                return "status-reopen";
            case StatusEnum.Done:
                return "status-done";
        }
        return "";
    }
    class Card
    {
        public FullTask FullTask;
        public string Name;
    }
}
<style>
    .form-select {
        margin-bottom: 10px;
    }

    .tasks-container {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin-top: 15px;
        margin-bottom: 80px;
    }

    .task-card {
        border: 2px solid #e0e0e0;
        border-radius: 12px;
        overflow: hidden;
        transition: transform 0.2s, box-shadow 0.2s;
        cursor: pointer;
        background: white;
    }

    .task-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15) !important;
    }

    .task-card-body {
        padding: 16px;
        background: white;
    }

    .task-title {
        margin: 0 0 12px 0;
        font-size: 1.1rem;
        font-weight: 600;
        color: #333;
    }

    .task-user {
        margin: 0;
        color: #666;
        font-size: 0.95rem;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .task-user i {
        font-size: 1rem;
    }

    .task-status {
        padding: 12px 16px;
        text-align: center;
        font-weight: 600;
        font-size: 0.9rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border-top: 2px solid rgba(0, 0, 0, 0.1);
    }

    .status-text {
        display: inline-block;
    }

    /* Status colors */
    .status-todo {
        background: linear-gradient(135deg, #f5f5f5 0%, #e8e8e8 100%);
        color: #555;
    }

    .status-inprogress {
        background: linear-gradient(135deg, #4fc3f7 0%, #29b6f6 100%);
        color: white;
    }

    .status-toreview {
        background: linear-gradient(135deg, #ffb74d 0%, #ffa726 100%);
        color: white;
    }

    .status-reopen {
        background: linear-gradient(135deg, #ef5350 0%, #e53935 100%);
        color: white;
    }

    .status-done {
        background: linear-gradient(135deg, #66bb6a 0%, #4caf50 100%);
        color: white;
    }

    .shadow-sm {
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

</style>
