@page "/materialItem/{materialId:int?}"
@using System.Diagnostics

@using catch_up_mobile.Components.Pages.MaterialManager
@using catch_up_mobile.Dtos
@using catch_up_mobile.Components.Camera
@using System.ComponentModel.DataAnnotations
@using Plugin.LocalNotification;

@using CommunityToolkit.Maui.Storage
@using CommunityToolkit.Maui.Alerts
@using CommunityToolkit.Maui.Views

@using Plugin.Maui.Audio

@using System.Text.Json
@inject IFileSaver FileSaver
@inject HttpClient _httpClient

<section>
    @if (material != null)
    {
        <h3>@material.Name</h3>
        <ul class="list-group">
            @foreach (var file in material.Files)
            {
                <li class="list-group-item d-flex justify-content-between align-items-start pt-2 pb-2 material-item">
                    <span class="material-name">@file.Name</span>
                    <div>
                        @if (showRemoveFile)
                        {
                            <a class="me-3 p-2" @onclick="() => RemoveFile(file.Id)">
                                <i class="bi bi-trash3 deleteIcon"></i>
                            </a>
                        }
                        @if (showDownloadFile)
                        {
                            <a class="ms-3 p-2" @onclick="() => DownloadFile(file.Id)">
                                <i class="bi bi-file-earmark-arrow-down downloadIcon"></i>
                            </a>
                        }
                    </div>
                </li>
            }
        </ul>
        @if (showAddingFile)
        {
            <div class="d-flex justify-content-between mt-3 mb-3 btn-group">
                <button type="button"
                class="btn btn-outline-secondary flex-grow-1 w-100  @(ActiveComponent == "MicRecorder" ? "active" : "")"
                style="flex-basis: 33.33%;"
                @onclick='() => SetActiveComponent("MicRecorder")'>
                    <i class="bi bi-mic"></i>
                </button>
                <button type="button"
                class="btn btn-outline-secondary flex-grow-1 w-100 @(ActiveComponent == "CamManager" ? "active" : "")"
                style="flex-basis: 33.33%;"
                @onclick='OpenCameraPage'>
                    <i class="bi bi-camera"></i>
                </button>
                <button type="button"
                class="btn btn-outline-secondary flex-grow-1 w-100  @(ActiveComponent == "FileSelector" ? "active" : "")"
                style="flex-basis: 33.33%;"
                @onclick='() => SetActiveComponent("FileSelector")'>
                    <i class="bi bi-folder-plus"></i> Files
                </button>
            </div>

        }

        @if (ActiveComponent == "MicRecorder")
        {
            <Recorder OnSendFile="UploadByMic" />
        }
        else if (ActiveComponent == "FileSelector")
        {
            <FileSelector OnSendFile="UploadByFileSelector" />
        }
    }
    else
    {
        <EditForm Model="materialModal" OnValidSubmit="CreateMaterial">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <div class="input-group mb-3">
                    <InputText type="text" class="form-control" placeholder="Material's name" @bind-Value="materialModal.Name" />
                    <button class="btn btn-outline-secondary" type="submit">
                        Create
                    </button>
                </div>
                <ValidationMessage For="() => materialModal.Name" />
            </div>
        </EditForm>
    }
</section>
@code {
    [Parameter] public int? materialId { get; set; }
    [Parameter] public bool showRemoveFile { get; set; } = false;
    [Parameter] public bool showDownloadFile { get; set; } = false;
    [Parameter] public bool showAddingFile { get; set; } = false;
    [Parameter] public EventCallback<int> materialCreated { get; set; }

    private MaterialDto material { get; set; }
    private string? materialName { get; set; }
    private string ActiveComponent { get; set; }
    private MaterialModel materialModal = new MaterialModel();

    private class MaterialModel
    {
        [Required(ErrorMessage = "Material's name is required")]
        [StringLength(int.MaxValue, MinimumLength = 5, ErrorMessage = "Material's name must be at least 5 characters long")]
        public string Name { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        if (materialId == null || materialId == 0)
            material = null;
        else
        {
            await LoadMaterial();
        }

    }

    private async Task LoadMaterial()
    {
        try
        {
            material = await _httpClient.GetFromJsonAsync<MaterialDto>($"api/material/GetWithFiles/{materialId.Value}");
        }
        catch (Exception ex)
        {
            await Toast.Make($"Material fetching error: {ex.Message}").Show();
        }
    }

    private async Task CreateMaterial()
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync($"api/material/Create", materialModal);
            var responseContent = await response.Content.ReadFromJsonAsync<MaterialDto>();
            if (response.IsSuccessStatusCode && responseContent != null)
            {
                materialId = responseContent.Id;
                materialName = responseContent.Name;
                material = responseContent;
                material.Files = new List<FileDto>();

                if (materialId.HasValue)
                    await materialCreated.InvokeAsync(materialId.Value);
            }
            else
            {
                await Toast.Make("Failed to parse material response").Show();
            }
        }
        catch (Exception ex)
        {
            await Toast.Make($"Error in creating material {ex.Message}").Show();
        }

    }

    private async Task RemoveFile(int fileId)
    {
        try
        {
            if (material != null)
            {
                var popup = new ConfirmPopup($"Do you want to delete this file?", async (isConfirmed) =>
                {
                    if (isConfirmed)
                    {
                        await _httpClient.PostAsJsonAsync($"api/material/RemoveFile/{materialId}/{fileId}", new { });
                        material.Files = material.Files.Where(f => f.Id != fileId).ToList();
                        await Toast.Make("Schooling successfully deleted").Show();

                        StateHasChanged();
                    }
                });
                App.Current.MainPage.ShowPopup(popup);
            }
        }
        catch (Exception ex)
        {
            await Toast.Make($"Error removing file {ex.Message}").Show();
        }
    }
    private async Task DownloadFile(int fileId)
    {
        try
        {
            var response = await _httpClient.GetAsync($"api/file/Download/{fileId}", HttpCompletionOption.ResponseHeadersRead);
            var file = material?.Files.FirstOrDefault(f => f.Id == fileId);

            if (response.IsSuccessStatusCode && file != null)
            {
                await using var stream = await response.Content.ReadAsStreamAsync();

                var fileName = $"{file.Name}";
                // var saverProgress = new Progress<double>(percentage => ProgressBar.ProgressProperty = percentage);
                var fileSaverResult = await FileSaver.SaveAsync(fileName, stream);
                // var fileSaverResult = await FileSaver.Default.SaveAsync(fileName, stream, saverProgress);

                if (fileSaverResult.IsSuccessful)
                {
                    await Toast.Make($"The file was saved successfully to: {fileSaverResult.FilePath}").Show();
                    if (await LocalNotificationCenter.Current.AreNotificationsEnabled() == false)
                    {
                        await LocalNotificationCenter.Current.RequestNotificationPermission();
                    }
                    var notification = new NotificationRequest
                        {
                            Title = "Download Complete",
                            Description = $"File {fileName} downloaded successfully.",
                            ReturningData = fileSaverResult.FilePath,
                            NotificationId = fileId
                        };
                    await LocalNotificationCenter.Current.Show(notification);
                }
                else
                {
                    await Toast.Make($"The file was not saved successfully. Error: {fileSaverResult.Exception.Message}").Show();
                }
            }
            else
                await Toast.Make($"Failed to download the file. Server returned: {response.StatusCode}").Show();
        }
        catch (Exception ex)
        {
            await Toast.Make($"Error downloading or saving the file: {ex.Message}").Show();
        }
    }
    private void SetActiveComponent(string? component)
    {
        ActiveComponent = component;
    }

    private async Task OpenCameraPage()
    {
        SetActiveComponent("CamManager");
        var cameraPage = new CameraPage
        {
                OnSendFile = EventCallback.Factory.Create<Stream>(this, UploadByCam)
        };
        await App.Current.MainPage.Navigation.PushAsync(cameraPage);
    }

    private async Task UploadByFileSelector(FileResult fileResult)
    {

        try
        {
            var stream = await fileResult.OpenReadAsync();

            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(fileResult.ContentType);
            content.Add(fileContent, "file", fileResult.FileName);

            if (materialId.HasValue)
                content.Add(new StringContent(materialId.Value.ToString()), "materialId");

            var response = await _httpClient.PostAsync($"api/file/Upload?materialId={materialId.Value}", content);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();
                if (responseData != null && responseData.ContainsKey("fileDto") && responseData.ContainsKey("materialId"))
                {
                    var fileDtoJson = JsonSerializer.Serialize(responseData["fileDto"]);
                    var fileDto = JsonSerializer.Deserialize<FileDto>(fileDtoJson);

                    material.Files.Add(fileDto);
                    await Toast.Make("File uploaded successfully!").Show();
                }
            }
            else
                await Toast.Make($"Failed to upload file. Error: {response.StatusCode}").Show();
        }
        catch (Exception ex)
        {
            await Toast.Make($"Error uploading file: {ex.Message}").Show();
        }
    }
    private async Task UploadByMic(IAudioSource? audioSource)
    {
        try
        {
            if (audioSource == null)
            {
                await Toast.Make("No audio source available to upload.").Show();
                return;
            }

            var stream = audioSource.GetAudioStream();
            stream.Position = 0;

            var content = new MultipartFormDataContent();

            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("audio/mpeg");
            content.Add(fileContent, "file", $"Audio_{DateTime.Now:yyyyMMdd_HHmmss}.mp3");

            if (materialId.HasValue)
                content.Add(new StringContent(materialId.Value.ToString()), "materialId");

            var response = await _httpClient.PostAsync($"api/file/Upload?materialId={materialId.Value}", content);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();
                if (responseData != null && responseData.ContainsKey("fileDto") && responseData.ContainsKey("materialId"))
                {
                    var fileDtoJson = JsonSerializer.Serialize(responseData["fileDto"]);
                    var fileDto = JsonSerializer.Deserialize<FileDto>(fileDtoJson);

                    material.Files.Add(fileDto);
                    await Toast.Make("Audio uploaded successfully!").Show();
                }
            }
            else
                await Toast.Make($"Failed to upload audio. Error: {response.StatusCode}").Show();
        }
        catch (Exception ex)
        {
            await Toast.Make($"Error uploading audio: {ex.Message}").Show();
        }
    }

    private async Task UploadByCam(Stream stream)
    {
        try
        {
            SetActiveComponent(null);
            if (stream == null)
                return;

            var content = new MultipartFormDataContent();

            var fileContent = new StreamContent(stream);
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("image/png");
            content.Add(fileContent, "file", $"Image_{DateTime.Now:yyyyMMdd_HHmmss}.png");

            if (materialId.HasValue)
                content.Add(new StringContent(materialId.Value.ToString()), "materialId");

            var response = await _httpClient.PostAsync($"api/file/Upload?materialId={materialId.Value}", content);

            if (response.IsSuccessStatusCode)
            {
                var responseData = await response.Content.ReadFromJsonAsync<Dictionary<string, object>>();
                if (responseData != null && responseData.ContainsKey("fileDto") && responseData.ContainsKey("materialId"))
                {
                    var fileDtoJson = JsonSerializer.Serialize(responseData["fileDto"]);
                    var fileDto = JsonSerializer.Deserialize<FileDto>(fileDtoJson);

                    material.Files.Add(fileDto);
                    await Toast.Make("File uploaded successfully!").Show();
                }
            }
            else
                await Toast.Make($"Failed to upload file. Error: {response.StatusCode}").Show();
        }
        catch (Exception ex)
        {
            await Toast.Make($"Error uploading file: {ex.Message}").Show();
        }

    }
}
