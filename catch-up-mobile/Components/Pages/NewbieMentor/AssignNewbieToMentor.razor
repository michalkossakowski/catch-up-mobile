@page "/assign-newbie-to-mentor"

@inject HttpClient _httpClient
@inject NavigationManager NavigationManager
@using catch_up_mobile.Dtos

<div class="container mt-5">
    <h2>List of Mentors</h2>

    @if (mentors == null)
    {
        <Loading />
    }
    else
    {
        <div>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th style="cursor: pointer" @onclick='() => SortMentors("Name")'>
                            Name <i class="bi bi-arrow-down-up"></i>
                        </th>
                        <th style="cursor: pointer" @onclick='() => SortMentors("Surname")'>
                            Surname <i class="bi bi-arrow-down-up"></i>
                        </th>
                        <th style="cursor: pointer" @onclick='() => SortMentors("Position")'>
                            Position <i class="bi bi-arrow-down-up"></i>
                        </th>
                        <th style="cursor: pointer" @onclick='() => SortMentors("AssignCount")'>
                            Number of Newbies <i class="bi bi-arrow-down-up"></i>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (UserDto mentor in sortedMentors)
                    {
                        <tr @onclick="() => HandleMentorClick(mentor.Id, mentor.Name, mentor.Surname)">
                            <td>@mentor.Name</td>
                            <td>@mentor.Surname</td>
                            <td>@mentor.Position</td>
                            <td>@mentor.AssignCount</td>
                        </tr>
                    }
                </tbody>
            </table>
    </div>
    }
</div>

@code {
    private List<UserDto> mentors;
    private List<UserDto> sortedMentors;
    private string sortOrder = "Name";
    private string selectedMentorName;
    private string selectedMentorSurname;
    private Guid selectedMentorId;
    private bool sortAcs = true;
    protected override async Task OnInitializedAsync()
    {
        mentors = await _httpClient.GetFromJsonAsync<List<UserDto>>("api/NewbieMentor/GetAllMentors");
        foreach(UserDto mentor in mentors)
        {
            mentor.AssignCount = await _httpClient.GetFromJsonAsync<int>($"api/NewbieMentor/GetNewbieCountByMentor/{mentor.Id}");
        }
        sortedMentors = mentors;
    }

    private void SortMentors(string column)
    {
        if (sortOrder == column && sortAcs)
        {
            sortedMentors = sortedMentors.OrderByDescending(m => m.GetType().GetProperty(column).GetValue(m, null)).ToList();
            sortAcs = false;
        }
        else if (sortOrder == column && !sortAcs)
        {
            sortedMentors = sortedMentors.OrderBy(m => m.GetType().GetProperty(column).GetValue(m, null)).ToList();
            sortAcs = true;
        }
        else
        {
            sortedMentors = sortedMentors.OrderBy(m => m.GetType().GetProperty(column).GetValue(m, null)).ToList();
        }
        sortOrder = column;
    }

    private void HandleMentorClick(Guid mentorId, string name, string surname)
    {
        selectedMentorName = name;
        selectedMentorSurname = surname;
        selectedMentorId = mentorId;
    }
}
