@page "/newbies"
@inject HttpClient _httpClient

<h3 class="mb-4">Newbies List</h3>

<div class="row mb-4">
    <div class="col-md-6">
        <div class="input-group">
            <span class="input-group-text">
                <i class="bi bi-search"></i>
            </span>
            <input type="text"
                   class="form-control"
                   placeholder="Search newbies..."
                   @bind="searchTerm"
                   @bind:event="oninput"
                   @onkeyup="HandleSearch" />
        </div>
    </div>
</div>

@if (isOffline)
{
    <div class="alert alert-warning" role="alert">
        <i class="bi bi-wifi-off me-2"></i>
        You are currently offline.
    </div>
}
else if (isLoading)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 200px;">
        <Loading />
    </div>
}
else if (newbies == null)
{
    <div class="alert alert-danger" role="alert">
        Unable to load newbies data. Please try again later.
    </div>
}
else if (!filteredNewbies.Any())
{
    <div class="alert alert-info" role="alert">
        No newbies found matching your search.
    </div>
}
else
{
    <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
        @foreach (var newbie in filteredNewbies)
        {
            <div class="col">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">@newbie.Name @newbie.Surname</h5>
                        <p class="card-text text-muted">
                            <i class="bi bi-envelope"></i> @newbie.Email
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
}

@code {
    private List<Newbie> newbies;
    private List<Newbie> filteredNewbies = new();
    private bool isLoading = true;
    private bool isOffline = false;
    private string searchTerm = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            var response = await _httpClient.GetAsync("api/NewbieMentor/GetAllNewbies");
            if (response.IsSuccessStatusCode)
            {
                newbies = await response.Content.ReadFromJsonAsync<List<Newbie>>();
                filteredNewbies = newbies;
                isOffline = false;
            }
            else
            {
                newbies = null;
            }
        }
        catch (HttpRequestException)
        {
            isOffline = true;
        }
        catch (Exception ex)
        {
            newbies = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredNewbies = newbies;
            return;
        }

        filteredNewbies = newbies
            .Where(n =>
                n.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                n.Surname.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                n.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private class Newbie
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Surname { get; set; }
        public string Email { get; set; }
    }
}