@page "/login"

@inject HttpClient _httpClient
@inject NavigationManager NavigationManager
@inject CatchUpLocalDb DbContext
@inject IBiometricAuthService BiometricAuth
@inject CatchUpLocalDb _localDb

@using System.Text.Json
@using System.IdentityModel.Tokens.Jwt
@using catch_up_mobile.Dtos
@using catch_up_mobile.SQLite
@using Microsoft.Maui.Devices.Sensors
@using CommunityToolkit.Maui.Alerts

<div class="vh-100 d-flex align-items-center justify-content-center">
    <div class="w-100">
        <div class="card border-0">
            <div class="card-body p-4">
                @if (isLoading)
                {
                    <div class="text-center">
                        <div class="spinner-border text-primary m-3" role="status">
                            <span class="sr-only">Loading...</span>
                        </div>
                        <p>Logging in...</p>
                    </div>
                }
                else
                {
                    <h3 class="card-title text-center mb-4">Login</h3>
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <label class="form-label">Email:</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control form-control-lg" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="form-group mt-4">
                            <label class="form-label">Password:</label>
                            <InputText type="password" @bind-Value="loginModel.Password" class="form-control form-control-lg" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-4">@errorMessage</div>
                        }

                        <button type="submit" class="btn btn-primary btn-lg w-100 mt-4">Login</button>
                    </EditForm>

                    <button @onclick="HandleFingerprintLogin" class="btn btn-primary btn-lg w-100 mt-4">
                        <i class="bi bi-fingerprint me-2"></i> Use Fingerprint
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private LoginModel loginModel = new();
    private string errorMessage;
    private bool isLoading;
    private bool fingerprintEnabled = true;
    private string userCountry;

    private async Task<bool> CheckLocationAccess()
    {
        try
        {
            // Check if in Poland first
            var response = await _httpClient.GetAsync("https://ipinfo.io/json");
            if (!response.IsSuccessStatusCode)
            {
                errorMessage = "Unable to verify location.";
                return false;
            }

            string UserCountry = await GetUserLocation();
            if (UserCountry != "PL")
            {
                errorMessage = "Login is only available from Poland.";
                return false;
            }

            // using CompanyLocator to check city
            await CompanyLocator.GetLocation(_localDb);
            if (CompanyLocator.locationMessage.Contains("out of company cities"))
            {
                errorMessage = "You must be within a company city radius to login.";
                return false;
            }

            return true;
        }
        catch (Exception ex)
        {
            errorMessage = "Location verification failed.";
            return false;
        }
    }

    private async Task<string> GetUserLocation()
    {
        HttpResponseMessage response = await _httpClient.GetAsync("https://ipinfo.io/json");
        if (response.IsSuccessStatusCode)
        {
            GeolocationResponse locationData = await response.Content.ReadFromJsonAsync<GeolocationResponse>();
            return locationData?.Country;
        }
        return "Unknown";
    }

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        isLoading = true;

        try
        {
            if (!await CheckLocationAccess())
            {
                isLoading = false;
                return;
            }

            var response = await _httpClient.PostAsJsonAsync("api/Auth/Login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var tokens = await response.Content.ReadFromJsonAsync<TokenResponse>();
                if (tokens != null)
                {
                    await SaveUserAsync(tokens.RefreshToken);
                    NavigationManager.NavigateTo("/", true);
                }
                else
                {
                    errorMessage = "Invalid response from server";
                }
            }
            else
            {
                errorMessage = "Invalid login credentials";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleFingerprintLogin()
    {
        errorMessage = string.Empty;
        isLoading = true;
        try
        {
            if (!await CheckLocationAccess())
            {
                isLoading = false;
                return;
            }

            if (!await BiometricAuth.IsAvailableAsync())
            {
                errorMessage = "Fingerprint authentication is not available.";
                return;
            }

            var authenticated = await BiometricAuth.AuthenticateAsync("Fingerprint Login", "Authenticate to login");
            if (authenticated)
            {
                var credentials = await DbContext.GetFingerprintCredentialsAsync();
                if (credentials != null)
                {
                    loginModel.Email = credentials.Email;
                    loginModel.Password = credentials.Password;

                    await HandleLogin();
                }
                else
                {
                    isLoading = false;
                    errorMessage = "No credentials stored for fingerprint login.";
                }
            }
            else
            {
                isLoading = false;
                errorMessage = "Fingerprint authentication failed.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
    }

    private async Task SaveUserAsync(string refreshToken)
    {
        var handler = new JwtSecurityTokenHandler();
        var token = handler.ReadJwtToken(refreshToken);
        var userId = token.Claims.First(c => c.Type == "nameid").Value;

        var userResponse = await _httpClient.GetFromJsonAsync<UserDto>($"api/User/GetById/{userId}");
        if (userResponse != null)
        {
            await DbContext.SaveUserAsync(new UserDto
                {
                    Id = userResponse.Id,
                    Name = userResponse.Name,
                    Surname = userResponse.Surname,
                    Email = userResponse.Email,
                    Position = userResponse.Position
                });
            await DbContext.DeleteFingerprintCredentialsAsync();
            await DbContext.SaveFingerprintCredentialsAsync(userResponse.Email, loginModel.Password);
        }
    }

    private class TokenResponse
    {
        public string AccessToken { get; set; }
        public string RefreshToken { get; set; }
    }

    private class GeolocationResponse
    {
        public string Country { get; set; }
    }
}