@using CommunityToolkit.Maui.Alerts

@using catch_up_mobile.Dtos
@using catch_up_mobile.SQLite

@inject HttpClient _httpClient
@inject CatchUpLocalDb _localDb
@inject NavigationManager NavigationManager

@page "/schoolingList"

<div class="container">
    <h2 class="text-center">List of Schoolings</h2>

    @if (fullSchoolings == null)
    {
        <div class="text-center">
            <Loading/>
        </div>
    }
    else
    {
        if (offlineMode)
        {
            <div class="alert alert-primary" role="alert">
                You are working in offline mode
            </div>
        }

        <div class="accordion text-start mt-3 mb-3" id="accordionSchoolingList">
            @if (fullSchoolings.Count() == 0)
            {
                <div class="alert alert-warning" role="alert">
                    No schoolings found
                </div>
            }
            @for (int i = 0; i < fullSchoolings.Count; i++)
            {
                var schooling = fullSchoolings[i].Schooling;
                var category = fullSchoolings[i].Category;

                var collapseId = $"collapse{i}";
                var headingId = $"heading{i}";

                <div class="accordion-item">
                    <h2 class="accordion-header" id="@headingId">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                            <strong>@(i + 1). @schooling.Title</strong>
                        </button>
                    </h2>
                    <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headingId" data-bs-parent="#accordionSchoolingList">
                        <div class="accordion-body">
                            <strong class="fs-3">Category: @category.Name</strong>
                            <p>@schooling.Description</p>

                            <div class="d-flex justify-content-between btn-group" role="group">
                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#schoolingDetailsModal" @onclick="() => SeeDetails(schooling.Id)">See More</button>
                                @if (isAdmin && !offlineMode)
                                {
                                    <button type="button" class="btn btn-warning" @onclick="() => OpenSchoolingEdit(schooling.Id)">Edit</button>
                                    <button type="button" class="btn btn-danger" @onclick="() => schoolingIdToDelete = schooling.Id">Delete</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        if (isAdmin && !offlineMode)
        {
            <div class="d-grid mx-auto">
                <button type="button" class="btn btn-success" @onclick="OpenSchoolingAdd">Add new Schooling</button>
            </div>
        }
        else
        {
            <div class="alert alert-warning" role="alert">
                You cannot add/edit/delete Schoolings in offline mode
            </div>
        }
    }
    <SchoolingDetailsModal fullSchooling="@selectedSchooling" />
 </div>

@code {
    private List<FullSchoolingDto> fullSchoolings;
    private int schoolingIdToDelete;
    private FullSchoolingDto selectedSchooling;

    private bool offlineMode = true;
    private bool isAdmin = true; // Waiting for ADMIN
    protected override async Task OnInitializedAsync()
    {
        await LoadSchoolings();
    }

    private async Task LoadSchoolings()
    {
        try
        {
            fullSchoolings = await _httpClient.GetFromJsonAsync<List<FullSchoolingDto>>($"api/schooling/GetAllFull");
            offlineMode = false;
        }
        catch (Exception ex)
        {
            offlineMode = true;
            await Toast.Make($"Schooling fetching error: {ex.Message}").Show();
        }
    }
    private void OpenSchoolingAdd()
    {
        NavigationManager.NavigateTo("/schooling/add");
    }

    private void OpenSchoolingEdit(int schoolingId)
    {
        NavigationManager.NavigateTo($"/schooling/edit/{schoolingId}");
    }
    private void SeeDetails(int schoolingId)
    {
        selectedSchooling = fullSchoolings.Find(s => s.Schooling.Id == schoolingId);
    }
    private async Task ConfirmDeleteSchooling()
    {
        if (schoolingIdToDelete != null)
        {
            // await _httpClient.DeleteAsync($"api/faq/delete/{faqToDelete.Id}");
            // await _localDb.DeleteFaqAsync(faqToDelete);
            // faqs.Remove(faqToDelete);
            // faqToDelete = null;
            // await Toast.Make("FAQ successfully deleted").Show();
        }
    }
}
