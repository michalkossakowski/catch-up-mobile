@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject CatchUpDbContext _dbContext
@inject catch_up_mobile.Providers.HttpClientProvider _httpClientProvider
@inject HttpClient _httpClient
@inject IConfiguration _configuration
@inject IStringLocalizer<catch_up_mobile.Resources.Localization.Strings> L
@using Microsoft.Extensions.Localization
@using catch_up_mobile.SQLite
@using System.Text.Json
@using catch_up_mobile.Dtos
@using catch_up_mobile.SQLite
@using Microsoft.Maui.Devices.Sensors
@using CommunityToolkit.Maui.Alerts
@using Plugin.Fingerprint
@using Plugin.Fingerprint.Abstractions
@using System.IdentityModel.Tokens.Jwt
@using System.Net.Http.Json
@using Microsoft.Extensions.Configuration
@using Microsoft.Maui.Devices

@if (isLoading)
{
    <div class="text-center m-5">
        <Loading />
    </div>
}
else
{   
    @if (!isFingerprintAuthorized)
    {
        @errorMessage
    }
    else
    {
        @if (isAuthenticated)
        {
            <div class="page">
                <div class="sidebar fixed-top" style="position:sticky; top: 0">
                    <NavMenu />
                </div>

                <main>
                    <article class="content px-4">
                        @Body
                    </article>
                </main>
                <!-- Bottom Navigation Panel -->
                <div class="bottom-panel fixed-bottom shadow">
                    <div class="d-flex justify-content-around align-items-center">
                        <NavLink class="nav-link text-center flex-fill" href="tasks">
                            <i class="bi bi-list-task fs-4"></i>
                            <div>@L["Tasks"]</div>
                        </NavLink>
                        <NavLink class="nav-link text-center flex-fill" href="schoolingList">
                            <i class="bi bi-book fs-4"></i>
                            <div>@L["Schoolings"]</div>
                        </NavLink>
                        <NavLink class="nav-link text-center flex-fill" href="/" Match="NavLinkMatch.All">
                            <i class="bi bi-house-door fs-4"></i>
                            <div>@L["Home"]</div>
                        </NavLink>
                        <NavLink class="nav-link text-center flex-fill" href="feedback">
                            <i class="bi bi-pencil-square fs-4"></i>
                            <div>@L["Feedbacks"]</div>
                        </NavLink>
                        <NavLink class="nav-link text-center flex-fill" href="faq">
                            <i class="bi bi-question-circle fs-4"></i>
                            <div>@L["FAQ"]</div>
                        </NavLink>
                    </div>
                </div>

            </div>
        }
        else
        {
            <Login OnLoginSuccessful="() => isAuthenticated = true" />
        }
    }
}


@code {
    private bool isFingerprintAuthorized = false;
    private bool isAuthenticated = false;
    private bool isLoading = true;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = false;
        isFingerprintAuthorized = true;
        try
        {
            var user = await _dbContext.GetUserAsync();
            if (user == null)
            {
                isAuthenticated = false;
                isLoading = false;
                return;
            }

            var accessToken = await _dbContext.GetAccessToken();
            var refreshToken = await _dbContext.GetRefreshToken();

            if (string.IsNullOrEmpty(accessToken) || string.IsNullOrEmpty(refreshToken))
            {
                isAuthenticated = false;
                isLoading = false;
                return;
            }

            if (IsTokenExpired(accessToken))
            {
                var refreshed = await TryRefreshToken(refreshToken);
                if (!refreshed)
                {
                    await ClearUserData();
                    isAuthenticated = false;
                    isLoading = false;
                    return;
                }
            }

            isAuthenticated = true;
        }
        catch
        {
            isAuthenticated = false;
        }
        isLoading = false;
    }

    private bool IsTokenExpired(string token)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            var expClaim = jwtToken.Claims.FirstOrDefault(c => c.Type == "exp");

            if (expClaim != null && long.TryParse(expClaim.Value, out long expSeconds))
            {
                var expiryDate = DateTimeOffset.FromUnixTimeSeconds(expSeconds).DateTime;
                return DateTime.UtcNow >= expiryDate.AddMinutes(-1);
            }

            return true;
        }
        catch
        {
            return true;
        }
    }

    private async Task<bool> TryRefreshToken(string refreshToken)
    {
        try
        {
            var baseAddress = _configuration["ApiSettings:Url"];
            
            if (!string.IsNullOrWhiteSpace(baseAddress) && DeviceInfo.Platform == DevicePlatform.Android)
            {
                try
                {
                    var uri = new Uri(baseAddress);
                    if (uri.Host.Equals("localhost", StringComparison.OrdinalIgnoreCase) || uri.Host.Equals("127.0.0.1"))
                    {
                        var uriBuilder = new UriBuilder(uri) { Host = "10.0.2.2" };
                        baseAddress = uriBuilder.Uri.ToString();
                    }
                }
                catch { }
            }
            
            var httpClientHandler = new HttpClientHandler
            {
                ServerCertificateCustomValidationCallback = (sender, cert, chain, sslPolicyErrors) => true
            };
            
            using var httpClient = new HttpClient(httpClientHandler) 
            { 
                BaseAddress = new Uri(baseAddress ?? throw new InvalidOperationException("API Url not found in configuration"))
            };
            
            var content = new StringContent($"\"{refreshToken}\"", System.Text.Encoding.UTF8, "application/json");
            var response = await httpClient.PostAsync("api/Auth/Refresh", content);

            if (response.IsSuccessStatusCode)
            {
                var tokens = await response.Content.ReadFromJsonAsync<TokenResponse>();
                if (tokens != null)
                {
                    await _dbContext.SaveAccessToken(tokens.AccessToken);
                    await _dbContext.SaveRefreshToken(tokens.RefreshToken);
                    JwtTokens.SetTokens(tokens.AccessToken, tokens.RefreshToken);
                    return true;
                }
            }

            return false;
        }
        catch
        {
            return false;
        }
    }

    private async Task ClearUserData()
    {
        try
        {
            await _dbContext.ClearUserAsync();
            await _dbContext.DeleteAccessToken();
            await _dbContext.DeleteRefreshToken();
            JwtTokens.ClearTokens();
        }
        catch { }
    }

    private class TokenResponse
    {
        public string AccessToken { get; set; }
        public string RefreshToken { get; set; }
    }
}