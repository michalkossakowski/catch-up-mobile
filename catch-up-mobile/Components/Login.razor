@page "/login"

@using System.Text.Json
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.Extensions.Localization
@using Plugin.Firebase.CloudMessaging
@using System.Net.Http.Headers
@using catch_up_mobile.Dtos
@using catch_up_mobile.Providers
@using catch_up_mobile.SQLite
@using Microsoft.Maui.Devices.Sensors
@using CommunityToolkit.Maui.Alerts
@using Plugin.Fingerprint
@using Plugin.Fingerprint.Abstractions

@inject HttpClient _httpClient
@inject HttpClientProvider _httpClientProvider
@inject NavigationManager NavigationManager
@inject CatchUpDbContext _dbContext
@inject IBiometricAuthService BiometricAuth
@inject IStringLocalizer<catch_up_mobile.Resources.Localization.Strings> L
@if (isLoading)
{
    <div class="text-center m-5">
        <Loading />
        <p>@L["Loggingin"]</p>
    </div>
}
else
{
    <div class="vh-100 align-items-center justify-content-center">
        <div class="w-100">
            <div class="card border-0">
                <div class="card-body p-4">
                    <h3 class="card-title text-center mb-4">Login</h3>
                    <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <label class="form-label">Email:</label>
                            <InputText @bind-Value="loginModel.Email" class="form-control form-control-lg" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="form-group mt-4">
                            <label class="form-label">@L["Password"]:</label>
                            <InputText type="password" @bind-Value="loginModel.Password" class="form-control form-control-lg" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger mt-4">@errorMessage</div>
                        }

                            <button type="submit" class="btn btn-primary btn-lg w-100 mt-4">@L["Login"]</button>
                        </EditForm>
                    @if (isAuthenticated)
                    {
                        <button class="btn btn-primary btn-lg w-100 mt-4" @onclick="AuthenticateUser">@L["Loginfingerprint"]</button>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback OnLoginSuccessful {get; set; }
    private class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private LoginModel loginModel = new();
    private string errorMessage;
    private bool isLoading = true;
    private string userCountry;
    private List<CompanyCityDto> cities = new List<CompanyCityDto>();
    private bool isAuthenticated = false;

    protected override async Task OnInitializedAsync()
    {
        var user = await _dbContext.GetUserAsync();
        bool available = false;

        if (DeviceInfo.Platform == DevicePlatform.Android || DeviceInfo.Platform == DevicePlatform.iOS) {
            available = await CrossFingerprint.Current.IsAvailableAsync();
        }
        else {
            available = false;
        }

        isAuthenticated = user != null && available;
        if (isAuthenticated)
        {
            await AuthenticateUser();
        } else
        {
            isLoading = false;
        }
    }

    private async Task AuthenticateUser()
    {
        isLoading = true;
        errorMessage = string.Empty;

        var request = new AuthenticationRequestConfiguration
        (
            "Verify your identity",
            "Please scan your fingerprint to access the app"
        );

        var result = await CrossFingerprint.Current.AuthenticateAsync(request);

        if (result.Authenticated)
        {
            UserDto user = await _dbContext.GetUserAsync();
            if (await CheckLocationAccess(user.Id))
            {
                isLoading = false;
                return;
            }
            isLoading = false;
            await OnLoginSuccessful.InvokeAsync();
        }
        else
        {
            isLoading = false;
            errorMessage = "Finger auth failed";
        }
    }

    private async Task<bool> CheckLocationAccess(Guid userId)
    {
        try
        {
            var companySetting = await _httpClient.GetAsync("api/CompanySettings/Get");
            var userRoleResponse = await _httpClient.GetAsync($"api/User/GetRole/{userId}");
            Boolean isAdmin = await userRoleResponse.Content.ReadAsStringAsync() == "Admin";

            var result = await companySetting.Content.ReadFromJsonAsync<CompanySettingsResponse>();
            await _dbContext.SaveLocalizationSettingAsync(result.settings.settings.IsLocalizationRestricted);
            if (result.settings.settings.IsLocalizationRestricted && !isAdmin)
            { 
                #if WINDOWS
        var accessStatus = await Windows.Devices.Geolocation.Geolocator.RequestAccessAsync();
    if (accessStatus != Windows.Devices.Geolocation.GeolocationAccessStatus.Allowed)
    {
        errorMessage = "Location access denied by user. Please enable it in Settings > Privacy > Location.";
    return true;
    }
                #endif
                var allCitiesResponse = await _httpClient.GetAsync("api/CompanyCity/GetAllCities");
                string json = await allCitiesResponse.Content.ReadAsStringAsync();
                List<CompanyCityDto> allCities = JsonSerializer.Deserialize<List<CompanyCityDto>>(json);
                if (allCities != null && allCities.Any())
                {
                    cities = allCities;
                    List<CompanyCityDto> existingCities = await _dbContext.GetCitiesAsync();
                    foreach (CompanyCityDto city in cities)
                    {
                        if (!existingCities.Any(ec => ec.cityName == city.cityName))
                        {
                            await _dbContext.AddCityAsync(city);
                        }
                    }

                    await CompanyLocator.GetLocation(_dbContext);
                    if (CompanyLocator.locationMessage.Contains("You are out of company cities"))
                    {
                        errorMessage = "You are out of bounds of a company city";
                        return true;
                    }
                }
                else
                {
                    errorMessage = "Localization is restricted, but there's not cities data. Please contact the admin!";
                    return true;
                }
            }
            return false;
        }
        catch (Exception ex)
        {
            try
            {
                LocalizationSettingDto isLocalizationRestricted = await _dbContext.GetLocalizationSettingAsync();
                if (isLocalizationRestricted.IsRestricted)
                {
                    List<CompanyCityDto> existingCities = await _dbContext.GetCitiesAsync();
                    if (existingCities != null && existingCities.Count != 0)
                    {
                        await CompanyLocator.GetLocation(_dbContext);
                        if (CompanyLocator.locationMessage.Contains("You are out of company cities"))
                        {
                            errorMessage = "You are offline and out of bounds of a company city";
                            return true;
                        }
                        else
                        {
                            return false;
                        }
                    }
                    else
                    {
                        errorMessage = "You are offline and localization is restricted, but there's no cities data, please try again when online!";
                        return true;
                    }
                }
                else
                {
                    return false;
                }
            }
            catch (Exception ex2)
            {
                errorMessage = "You are offline. If it's your first time logging into the app, please try when online!";
                return true;
            }
        }
    }

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        isLoading = true;

        try
        {
            var response = await _httpClient.PostAsJsonAsync("api/Auth/Login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var tokens = await response.Content.ReadFromJsonAsync<TokenResponse>();
                if (tokens != null)
                {
                    var canProceed = await SaveUserAsync(tokens);

                    await _dbContext.SaveAccessToken(tokens.AccessToken);
                    _httpClientProvider.SetAccessToken(tokens.AccessToken);

#if ANDROID
                    _ = Task.Run(async () =>
                    {
                        try { await RegisterFirebaseToken(tokens.AccessToken); } catch { }
                    });
#endif
                    if (!canProceed)
                    {
                        return;
                    }

                    await OnLoginSuccessful.InvokeAsync();
                }
                else
                {
                    errorMessage = "Invalid response from server";
                }
            }
            else
            {
                errorMessage = "Invalid login credentials";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Can't login in offline mode";
        }
        finally
        {
            isLoading = false;
        }
    }

#if ANDROID
    private async Task RegisterFirebaseToken(string accessToken)
    {
        await CrossFirebaseCloudMessaging.Current.CheckIfValidAsync();
        var firebaseToken = await CrossFirebaseCloudMessaging.Current.GetTokenAsync();
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", accessToken);
        await _httpClient.PostAsJsonAsync("api/Auth/RegisterFirebaseToken", new
        {
            firebaseToken = firebaseToken,
            deviceName = DeviceInfo.Name.ToString()
        });
    }
#endif

    private async Task FetchAndSaveCitiesFromApi()
    {
        try
        {
            string apiEndpoint = "api/CompanyCity/GetAllCities";
            HttpResponseMessage response = await _httpClient.GetAsync(apiEndpoint);

            if (!response.IsSuccessStatusCode)
            {;
                errorMessage = $"Failed to fetch cities from API. Status: {response.StatusCode}";
                return;
            }

            string json = await response.Content.ReadAsStringAsync();
            List<CompanyCityDto> apiCities = JsonSerializer.Deserialize<List<CompanyCityDto>>(json);

            if (apiCities == null || !apiCities.Any())
            {
                errorMessage = "No cities received from API.";
                return;
            }

            List<CompanyCityDto> existingCities = await _dbContext.GetCitiesAsync();

            foreach (CompanyCityDto city in apiCities)
            {
                if (!existingCities.Any(c => c.cityName.Equals(city.cityName, StringComparison.OrdinalIgnoreCase)))
                {
                    await _dbContext.AddCityAsync(city);
                }
            }

            errorMessage = $"Successfully fetched and saved {apiCities.Count} cities from API.";
        }
        catch (Exception ex)
        {
            errorMessage = "Error fetching cities from API: " + ex.Message;
        }
    }

    private async Task<bool> SaveUserAsync(TokenResponse tokens)
    {
        var handler = new JwtSecurityTokenHandler();
        var token = handler.ReadJwtToken(tokens.RefreshToken);
        var userId = token.Claims.First(c => c.Type == "nameid").Value;

        JwtTokens.HttpClient = _httpClient;
        JwtTokens.SetTokens(tokens.AccessToken, tokens.RefreshToken);
        
        var userResponse = await _httpClient.GetFromJsonAsync<UserDto>($"api/User/GetById/{userId}");

        if (await CheckLocationAccess(userResponse.Id))
        {
            return false;
        }

        if (userResponse != null)
        {
            await _dbContext.SaveUserAsync(new UserDto
                {
                    Id = userResponse.Id,
                    Name = userResponse.Name,
                    Surname = userResponse.Surname,
                    Email = userResponse.Email,
                    Position = userResponse.Position
                });
        }
        return true;
    }

    private class CompanySettingsResponse
    {
        public string message { get; set; }
        public SettingsData settings { get; set; }
    }

    private class SettingsData
    {
        public int id { get; set; }
        public Settings settings { get; set; }
    }

    private class Settings
    {
        public bool IsLocalizationRestricted { get; set; }
    }

    private class TokenResponse
    {
        public string AccessToken { get; set; }
        public string RefreshToken { get; set; }
    }

    private class GeolocationResponse
    {
        public string Country { get; set; }
    }
}