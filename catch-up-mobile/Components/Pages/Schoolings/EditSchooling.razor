@page "/schooling/edit/{editedSchoolingId:int?}"

@using System.ComponentModel.DataAnnotations
@using catch_up_mobile.Dtos
@using catch_up_mobile.SQLite
@using CommunityToolkit.Maui.Alerts

@inject CatchUpLocalDb _localDb
@inject HttpClient _httpClient
@inject NavigationManager NavigationManager
<div class="text-center">
    <h3>@(editedSchoolingId.HasValue ? "Edit Schooling" : "Add New Schooling")</h3>
</div>

@if (categories == null)
{
    <div class="text-center">
        <Loading/>
    </div>
}
else
{
    <EditForm Model="schoolingModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />

        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control" @bind-Value="schoolingModel.Title" />
            <ValidationMessage For="() => schoolingModel.Title" />
        </div>
        <div class="mb-3">
            <label for="category" class="form-label">Category</label>
            <InputSelect id="category" class="form-control" @bind-Value="schoolingModel.CategoryId">
                <option value="">-- Select Category --</option>
                @foreach (var category in categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </InputSelect>
            <ValidationMessage For="() => schoolingModel.CategoryId" />
        </div>
        <div class="mb-3">
            <label for="priority" class="form-label">Priority</label>
            <InputNumber id="priority" class="form-control" @bind-Value="schoolingModel.Priority" />
            <ValidationMessage For="() => schoolingModel.Priority" />
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputTextArea id="description" class="form-control" style="height: 300px" @bind-Value="schoolingModel.Description" />
        </div>

        <div class="d-flex justify-content-between mt-4">
            <button type="button" class="btn btn-outline-danger" style="--bs-btn-padding-x: 2.5rem;" @onclick="Cancel"><i class="bi-arrow-left-square fs-3"></i></button>
            <div class="vr"></div>
            <button type="submit" class="btn btn-primary">@((editedSchoolingId.HasValue ? "Save Changes" : "Add Schooling"))</button>
            <div class="vr"></div>
            <button type="button" class="btn btn-outline-light @(editedSchoolingId.HasValue ? "" : "disabled")" style="--bs-btn-padding-x: 2.5rem;" @onclick="NavigateToAssignSchoolingParts"><i class="bi-arrow-right-square fs-3"></i></button>
        </div>
    </EditForm>
}
@code {
    [Parameter]
    public int? editedSchoolingId { get; set; }

    private SchoolingDto editedSchooling { get; set; }
    private List<CategoryDto> categories;
    private SchoolingModel schoolingModel = new SchoolingModel();


    private class SchoolingModel
    {
        public int? Id { get; set; }

        [Required(ErrorMessage = "Category is required")]
        public string CategoryId { get; set; }

        [Required(ErrorMessage = "Title is required")]
        [StringLength(int.MaxValue, MinimumLength = 5, ErrorMessage = "Title must be at least 5 characters long")]
        public string Title { get; set; }

        public string Description { get; set; } = "";

        [Required(ErrorMessage = "Priority is required")]
        [Range(1, int.MaxValue, ErrorMessage = "Priority must be a positive value")]
        public int Priority { get; set; }
    }


    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        if (editedSchoolingId.HasValue)
        {
            await LoadSchooling();
        }
    }
    private async Task HandleValidSubmit()
    {
        if (editedSchoolingId.HasValue)
        {
            try
            {
                schoolingModel.Id = editedSchoolingId;
                var response = await _httpClient.PutAsJsonAsync($"api/schooling/editSchooling", schoolingModel);
                await Toast.Make("Schooling successfully edited").Show();
            }
            catch (Exception ex)
            {
                await Toast.Make($"Error in editing schooling {ex.Message}").Show();
            }
        }
        else
        {
            try
            {
                var schoolingDto = new SchoolingDto
                    {
                        CategoryId = int.Parse(schoolingModel.CategoryId),
                        Title = schoolingModel.Title,
                        Description = schoolingModel.Description,
                        Priority = schoolingModel.Priority,
                        CreatorId = _localDb.GetUserAsync().Result.Id
                    };
                var response = await _httpClient.PostAsJsonAsync($"api/schooling/create", schoolingDto);
                var responseContent = await response.Content.ReadFromJsonAsync<FullSchoolingDto>();
                editedSchoolingId = responseContent.Schooling.Id;
                await Toast.Make("Schooling successfully added").Show();
            }
            catch (Exception ex)
            {
                await Toast.Make($"Error in creating schooling {ex.Message}").Show();
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/schoolingList");
    }

    private async Task LoadCategories()
    {
        try
        {
            categories = await _httpClient.GetFromJsonAsync<List<CategoryDto>>("api/category/GetAll");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
        }
    }

    private async Task LoadSchooling()
    {
        try
        {
            var response = await _httpClient.GetFromJsonAsync<FullSchoolingDto>($"api/Schooling/GetFull/{editedSchoolingId}");
            editedSchooling = response.Schooling;

            schoolingModel.Title = editedSchooling.Title;
            schoolingModel.CategoryId = editedSchooling.CategoryId.ToString();
            schoolingModel.Priority = editedSchooling.Priority;
            schoolingModel.Description = editedSchooling.Description;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading schooling: {ex.Message}");
            NavigationManager.NavigateTo("/schoolingList");
        }
    }
    private void NavigateToAssignSchoolingParts()
    {
        NavigationManager.NavigateTo($"/schooling/assignParts/{editedSchoolingId}");
    }
}
