@page "/feedback/add"
@inject HttpClient _httpClient
@inject NavigationManager NavigationManager
@inject CatchUpLocalDb DbContext

@using System.Text.Json
@using catch_up_mobile.Dtos
@using catch_up_mobile.Enums
@using CommunityToolkit.Maui.Alerts
@using catch_up_mobile.SQLite

<h3>Add Feedback</h3>
<div class="container">
    <EditForm Model="feedback" OnValidSubmit="SubmitFeedback">
        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control" @bind-Value="feedback.Title" />
        </div>
        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputTextArea id="description" class="form-control" @bind-Value="feedback.Description" />
        </div>
        <div class="mb-3">
            <label for="receiver" class="form-label">Receiver</label>
            <InputSelect id="receiver" class="form-control" @bind-Value="feedback.ReceiverId">
                <option value="">Select an admin</option>
                @foreach (var admin in admins)
                {
                    <option value="@admin.Id">@admin.Name @admin.Surname</option>
                }
            </InputSelect>
        </div>
        <button type="submit" class="btn btn-primary">Submit</button>
        <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    </EditForm>
</div>

@code {
    private Guid userId;
    private FeedbackDto feedback = new FeedbackDto();
    private List<UserDto> admins = new List<UserDto>();

    private string errorMessage;
    [Parameter]
    [SupplyParameterFromQuery(Name = "resourceId")]
    public int ResourceId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "resourceType")]
    public int ResourceTypeValue { get; set; }

    private ResourceTypeEnum _resourceType;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserDto user = await DbContext.GetUserAsync();
            userId = user.Id;
            feedback.SenderId = userId;
            feedback.ResourceType = (ResourceTypeEnum)ResourceTypeValue;
            feedback.ResourceId = ResourceId;
            feedback.createdDate = DateTime.Now;

            admins = await _httpClient.GetFromJsonAsync<List<UserDto>>("api/User/GetMentorAdmin");
        }
        catch (Exception ex)
        {
            System.Console.WriteLine($"Error in OnInitialized: {ex.Message}");
            errorMessage = "Error initializing feedback form";
            NavigationManager.NavigateTo("/faq");
        }
    }

    private async Task SubmitFeedback()
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync("api/feedback/Add", feedback);
            var content = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                await Toast.Make($"Feedback successfully added").Show();
                if (ResourceTypeValue == (int)ResourceTypeEnum.Faq)
                {
                    NavigationManager.NavigateTo("/faq");
                }
                else if (ResourceTypeValue == (int)ResourceTypeEnum.Schooling)
                {
                    NavigationManager.NavigateTo("/schoolingList");
                }
                else if (ResourceTypeValue == (int)ResourceTypeEnum.Task)
                {
                    NavigationManager.NavigateTo("/tasks");
                }
            }
            else
            {
                errorMessage = $"Error submitting feedback: {response.StatusCode} - {content}";
                System.Diagnostics.Debug.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error: {ex.Message}";
            System.Diagnostics.Debug.WriteLine($"Exception during submission: {ex}");
        }
    }

    private void Cancel()
    {
        if (ResourceTypeValue == (int)ResourceTypeEnum.Faq)
        {
            NavigationManager.NavigateTo("/faq");
        }
        else if (ResourceTypeValue == (int)ResourceTypeEnum.Schooling)
        {
            NavigationManager.NavigateTo("/schoolingList");
        }
        else if (ResourceTypeValue == (int)ResourceTypeEnum.Task)
        {
            NavigationManager.NavigateTo("/tasks");
        }
    }
}
