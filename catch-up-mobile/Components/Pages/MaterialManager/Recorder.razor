@page "/recorder"
@using Plugin.Maui.Audio

@using CommunityToolkit.Maui.Storage
@using CommunityToolkit.Maui.Alerts
@using CommunityToolkit.Maui.Views

@using catch_up_mobile.Dtos

@inject IAudioManager AudioManager


<div class="container text-center">

    <h1>Recorder</h1>

    <div class="d-flex mt-3 mb-3 btn-group ">
      
        @if (!recording)
        {
            @if(audioSource != null)
            {
                <button class="btn btn-secondary " @onclick="StartRecording"><i class="bi bi-arrow-counterclockwise fs-5"></i></button>

                @if (player == null)
                {
                    <button class="btn btn-success" @onclick="PlayRecording"><i class="bi bi-play fs-5"></i></button>
                   
                }
                else
                {
                    <button class="btn btn-warning" @onclick="StopPlaying"><i class="bi bi-pause fs-5"></i></button>
                }
            
                
                <button class="btn btn-primary" @onclick="SaveRecording"><i class="bi bi-floppy fs-5"></i></button>
            }
            else
            {
                <button class="btn btn-danger" @onclick="StartRecording"><i class="bi-mic fs-5" aria-hidden="true"></i></button>
            }
        }
        else
        {
            <button class="btn btn-danger" @onclick="StopRecording"><i class="bi bi-stop fs-5"></i></button>

            <button class="btn btn-danger" type="button" disabled>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Recording...
            </button>
        }
    </div>
</div>

@code {
    [Parameter]
    public EventCallback<IAudioSource> OnSendFile { get; set; }

    private IAudioRecorder recorder;
    private IAudioSource audioSource;
    public bool recording = false;
    private IAudioPlayer player;

    protected override async Task OnInitializedAsync()
    {
        await RequestMicrophonePermission();
        recorder = AudioManager.CreateRecorder();
    }

    private async Task RequestMicrophonePermission()
    {
        var status = await Permissions.RequestAsync<Permissions.Microphone>();
    }

    public async Task StartRecording()
    {
        player = null;
        recording = true;
        await recorder.StartAsync();
    }

    public async Task StopRecording()
    {
        recording = false;
        audioSource = await recorder.StopAsync();
    }

    private async Task PlayRecording()
    {
        if (audioSource != null)
        {
            player = AudioManager.CreatePlayer(audioSource.GetAudioStream());
            player.Play();
            await Task.Run(() =>
            {
                var temp = player;
                Thread.Sleep(((int)player.Duration+1)*1000);
                if(player == temp)
                {
                    StopPlaying();
                }
            });
        }
    }

    private void StopPlaying()
    {
        player.Stop();
        player.Dispose();
        player = null;
    }

    private async Task SaveRecording()
    {
        var popup = new ConfirmPopup($"Do you want to send this file?", async (isConfirmed) =>
        {
            if (isConfirmed)
            {
                await Toast.Make("Recording saved").Show();
                await OnSendFile.InvokeAsync(audioSource);
            }
            else
            {
                await Toast.Make("Saving canceled").Show();
            }
        });
        App.Current.MainPage.ShowPopup(popup);
    }
}