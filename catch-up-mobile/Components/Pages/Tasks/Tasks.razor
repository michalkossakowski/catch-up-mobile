@page "/tasks"

@inject HttpClient _httpClient
@inject CatchUpLocalDb DbContext

@using catch_up_mobile.SQLite
@using catch_up_mobile.Dtos
<h3>Tasks</h3>

<div> 
    @if (cards == null)
    {
        <div class="text-center">
            <Loading />
        </div>
    }
    else
    {
        @if (cards.Count == 0)
        {
            <div class="alert alert-warning" role="alert">
                No tasks found
            </div>
        }
        else
        {
            @foreach (var card in cards)
            {
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@card.FullTask.Title</h5>
                        <p class="card-text">@card.Name</p>
                    </div>
                </div>
            }
        }

        
    }
    
</div>


@code {
    private List<Card> cards = new List<Card>();

    protected override async Task OnInitializedAsync()
    {
        cards = new List<Card>();
        UserDto currentUser = await DbContext.GetUserAsync();
        var response = await _httpClient.GetAsync($"api/User/GetRole/{currentUser.Id}");
        string userRole = await response.Content.ReadAsStringAsync();
        List<FullTask> fullTasks = new List<FullTask>();
        if(userRole.ToLower() == "mentor")
            fullTasks = await _httpClient.GetFromJsonAsync<List<FullTask>>($"api/Task/GetAllFullTasksByAssigningId/{currentUser.Id}");
        else if(userRole.ToLower() == "newbie")
            fullTasks = await _httpClient.GetFromJsonAsync<List<FullTask>>($"api/Task/GetAllFullTasksByNewbieId/{currentUser.Id}");
        else if (userRole.ToLower() == "admin")
            fullTasks = await _httpClient.GetFromJsonAsync<List<FullTask>>($"api/Task/GetAllFullTasks");

        foreach (var fullTask in fullTasks)
        {
            Card newCard = new Card();
            newCard.FullTask = fullTask;
            newCard.Name = await GetNewbieName(fullTask.NewbieId);
            cards.Add(newCard);
        }

    }
    private async Task<string> GetNewbieName(Guid? newbieId)
    {
        var user = await _httpClient.GetFromJsonAsync<UserDto>($"api/User/GetById/{newbieId}");

        return $"{user.Name} {user.Surname}";
    }
    class Card
    {
        public FullTask FullTask;
        public string Name;
    }
}
