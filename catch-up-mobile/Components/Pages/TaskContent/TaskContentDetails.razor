@page "/taskcontent/{Id:int}"
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject CatchUpDbContext _dbContext
@using System.Net.Http.Json
@using System.Text.Json
@using catch_up_mobile.SQLite
@using catch_up_mobile.Components.Pages.MaterialManager
@using catch_up_mobile.Dtos
@using catch_up_mobile.Dtos

<div class="container">
    @if (taskContent == null)
    {
        <div class="text-center">
            @if (errorMessage != null)
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }
            else
            {
                <Loading/>
            }
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h3 class="mb-0">@taskContent.Title</h3>
                <button class="btn btn-secondary" @onclick="GoBack">
                    <i class="bi bi-arrow-left"></i> Back to List
                </button>
            </div>
            <div class="card-body">
                <h5 class="card-title">Description</h5>
                <p class="card-text">@taskContent.Description</p>

                <h5 class="card-title mt-4">Category</h5>
                <p class="card-text">@(categoryName ?? "No category")</p>

                @if (taskContent.MaterialsId.HasValue && taskContent.MaterialsId.Value > 0)
                {
                    <h5 class="card-title mt-4">Additional Materials</h5>
                    <div class="m-2">
                        <MaterialItem materialId="@taskContent.MaterialsId.Value"
                                      showRemoveFile="false"
                                      showDownloadFile="true"
                                      showAddingFile="false" />
                    </div>
                }
                else
                {
                    <h5 class="card-title mt-4">Material</h5>
                    <span>No material attached</span>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    
    [Parameter]
    [SupplyParameterFromQuery(Name = "categoryName")]
    public string? CategoryNameFromQuery { get; set; }

    private TaskContentDto? taskContent;
    private List<CategoryDto> categories = new();
    private string? categoryName;
    private MaterialDto? material;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try 
        {
            var categoriesTask = Http.GetFromJsonAsync<List<CategoryDto>>("api/Category/GetAll");
            var taskContentTask = Http.GetFromJsonAsync<TaskContentDto>($"api/TaskContent/GetById/{Id}");
            
            await Task.WhenAll(categoriesTask, taskContentTask);
            
            categories = await categoriesTask ?? new List<CategoryDto>();
            taskContent = await taskContentTask;
            
            if (taskContent == null)
            {
                errorMessage = "Task content not found";
                return;
            }

            if (taskContent.CategoryId.HasValue && taskContent.CategoryId.Value > 0)
            {
                categoryName = categories.FirstOrDefault(c => c.Id == taskContent.CategoryId.Value)?.Name;
            }
        }
        catch (HttpRequestException)
        {
            var all = await _dbContext.GetTaskContentsAsync();
            taskContent = all?.FirstOrDefault(t => t.Id == Id);
            categories = await _dbContext.GetCategoriesAsync();
            
            if (taskContent != null && taskContent.CategoryId.HasValue && taskContent.CategoryId.Value > 0)
            {
                categoryName = categories.FirstOrDefault(c => c.Id == taskContent.CategoryId.Value)?.Name;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load task content.";
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/taskcontent");
    }
} 