@page "/feedback"

@inject HttpClient _httpClient
@inject CatchUpLocalDb DbContext
@inject NavigationManager NavigationManager

@using catch_up_mobile.Dtos
@using catch_up_mobile.Enums
@using catch_up_mobile.SQLite
@using CommunityToolkit.Maui.Alerts

<div class="container text-center">
    <h3>Feedbacks</h3>
    @if (isLoading)
    {
        <Loading />
    }
    else
    {
        <div class="accordion text-start mt-3 mb-3" id="accordionExample">
            @if (!feedbacks.Any())
            {
                <div class="alert alert-secondary text-center" role="alert">
                    No feedbacks found
                </div>
            }
            else
            {
                @for (int i = 0; i < feedbacks.Count; i++)
                {
                    var feedback = feedbacks[i];
                    var collapseId = $"collapse{i}";
                    var headingId = $"heading{i}";
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="@headingId">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                                <strong>@(i + 1). @feedback.Title</strong>
                            </button>
                        </h2>
                        <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headingId" data-bs-parent="#accordionExample">
                            <div class="accordion-body">
                                @if (isAdmin)
                                {
                                    <strong>Sender:</strong>
                                    <ul><li>@GetUserFullName(feedback.SenderId)</li></ul>
                                }
                                else
                                {
                                    <strong>Receiver:</strong>
                                    <ul><li>@GetUserFullName(feedback.ReceiverId)</li></ul>
                                }
                                <strong>Description:</strong>
                                <ul><li>@feedback.Description</li></ul>

                                <strong>Date:</strong>
                                <ul><li>@feedback.createdDate.ToString("dd MMM yyyy")</li></ul>

                                <strong>Resource type:</strong>
                                <ul><li>@feedback.ResourceType</li></ul>

                                <strong>Resource title:</strong>
                                <ul><li>@GetResourceTitle(feedback.ResourceType, feedback.ResourceId)</li></ul>

                                @if (isAdmin && !offlineMode)
                                {
                                    <div>
                                        <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal" @onclick="() => feedbackToDelete = feedback">
                                            Delete
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        </div>
        @if (offlineMode)
        {
            <div class="alert alert-primary" role="alert">
                You are working in offline mode
            </div>
        }
    }
</div>

<div class="modal fade text-center" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h5>Are you sure you want to delete this Feedback?</h5>
                <div class="card p-2"><strong>@feedbackToDelete?.Title</strong></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="ConfirmDeleteFeedback">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<FeedbackDto> feedbacks = new();
    private FeedbackDto feedbackToDelete;
    private bool offlineMode = false;
    private bool isAdmin = false;
    private bool isLoading = true;
    private List<FaqDto> faqs = new();
    private List<FullSchoolingDto> schoolingsFull = new();
    private List<FullTask> tasks = new();
    private List<UserDto> users = new();
    private Guid userId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserDto user = await DbContext.GetUserAsync();
            if (user == null)
            {
                feedbacks = new List<FeedbackDto>();
                isLoading = false;
                return;
            }

            userId = user.Id;
            await LoadAllData();
        }
        catch (HttpRequestException)
        {
            await LoadOfflineData();
            offlineMode = true;
        }
        catch (Exception)
        {
            feedbacks = new List<FeedbackDto>();
            offlineMode = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadAllData()
    {
        try
        {
            var userRoleResponse = await _httpClient.GetAsync($"api/User/GetRole/{userId}");
            if (userRoleResponse.IsSuccessStatusCode)
            {
                var ResUser = await userRoleResponse.Content.ReadAsStringAsync() == "Newbie";
                isAdmin = !ResUser;
            }

            string endpoint = isAdmin ?
                $"api/feedback/GetByReceiverId/{userId}" :
                $"api/feedback/GetBySenderId/{userId}";

            var feedbackResponse = await _httpClient.GetAsync(endpoint);
            if (feedbackResponse.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                feedbacks = new List<FeedbackDto>();
                return;
            }

            if (feedbackResponse.IsSuccessStatusCode)
            {
                feedbacks = await feedbackResponse.Content.ReadFromJsonAsync<List<FeedbackDto>>();
                await DbContext.DeleteAllFeedbacksAsync();
                foreach (var feedback in feedbacks)
                {
                    await DbContext.AddFeedbackAsync(feedback);
                }
            }

            var faqResponse = await _httpClient.GetAsync("api/faq/GetAll");
            if (faqResponse.IsSuccessStatusCode)
            {
                faqs = await faqResponse.Content.ReadFromJsonAsync<List<FaqDto>>();
            }

            var schoolingResponse = await _httpClient.GetAsync("api/schooling/GetAllFull");
            if (schoolingResponse.IsSuccessStatusCode)
            {
                schoolingsFull = await schoolingResponse.Content.ReadFromJsonAsync<List<FullSchoolingDto>>();
            }

            var taskResponse = await _httpClient.GetAsync("api/task/GetAllFullTasks");
            if (taskResponse.IsSuccessStatusCode)
            {
                tasks = await taskResponse.Content.ReadFromJsonAsync<List<FullTask>>();
            }

            var userResponse = await _httpClient.GetAsync("api/user/GetAll");
            if (userResponse.IsSuccessStatusCode)
            {
                users = await userResponse.Content.ReadFromJsonAsync<List<UserDto>>();
            }

            offlineMode = false;
        }
        catch
        {
            await LoadOfflineData();
            offlineMode = true;
        }
    }

    private async Task LoadOfflineData()
    {
        feedbacks = await DbContext.GetFeedbacksAsync();
        if (feedbacks == null)
            feedbacks = new List<FeedbackDto>();

        faqs = await DbContext.GetFaqsAsync();
        if (faqs == null)
            faqs = new List<FaqDto>();

        var currentUser = await DbContext.GetUserAsync();
        users = currentUser != null ?
            new List<UserDto> { currentUser } :
            new List<UserDto>();

        offlineMode = true;
    }

    private string GetUserFullName(Guid userId)
    {
        if (users == null) return "Unknown User";
        var user = users.FirstOrDefault(u => u.Id == userId);
        return user != null ? $"{user.Name} {user.Surname}" : "Unknown User";
    }

    private string GetResourceTitle(ResourceTypeEnum resourceType, int resourceId)
    {
        try
        {
            return resourceType switch
            {
                ResourceTypeEnum.Faq => faqs?.FirstOrDefault(f => f.Id == resourceId)?.Question ?? "No title",
                ResourceTypeEnum.Schooling => schoolingsFull?
                    .Select(f => f.Schooling)
                    .FirstOrDefault(s => s.Id == resourceId)?.Title ?? "No title",
                ResourceTypeEnum.Task => tasks?.FirstOrDefault(f => f.Id == resourceId)?.Title ?? "No title",
                _ => "No title"
            };
        }
        catch
        {
            return "No title";
        }
    }

    private async Task ConfirmDeleteFeedback()
    {
        if (feedbackToDelete == null) return;

        try
        {
            var response = await _httpClient.DeleteAsync($"api/feedback/delete/{feedbackToDelete.Id}");
            if (response.IsSuccessStatusCode)
            {
                await DbContext.DeleteFeedbackAsync(feedbackToDelete);
                feedbacks.Remove(feedbackToDelete);
                feedbackToDelete = null;
                await Toast.Make("Feedback successfully deleted").Show();
            }
        }
        catch (Exception)
        {
            await Toast.Make("Failed to delete feedback. Please try again.").Show();
        }
    }
}