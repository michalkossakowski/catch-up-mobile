@page "/tasks/details/{fullTaskId:int?}"

@inject HttpClient _httpClient
@inject CatchUpLocalDb DbContext
@inject NavigationManager NavigationManager
@using catch_up_mobile.Components.Pages.MaterialManager
@using System.ComponentModel.DataAnnotations;
@using catch_up_mobile.SQLite
@using catch_up_mobile.Dtos
@using catch_up_mobile.Enums
@using CommunityToolkit.Maui.Alerts
@using CommunityToolkit.Maui.Views


@if (isLoading)
{
    <div class="text-center">
        <Loading />
    </div>
}
else
{
    <div class="card">
        <div class="card-header">
            @fullTask.Title
        </div>
        <div class="card-body">

            @if (currentUser.Id == fullTask.AssigningId)
            {
                <p class="card-text">Assigned by you to @fullTask.NewbieName</p>
            }
            else if (currentUser.Id == fullTask.NewbieId)
            {
                <p class="card-text">Assigned by @fullTask.AssigningName to you</p>
            }else
            {
                <p class="card-text">Assigned by @fullTask.AssigningName to @fullTask.NewbieName</p>
            }
        </div>
    </div>
    <div class="card">
        <div class="card-header">
            Description:
        </div>
        <div class="card-body">
            <p class="card-text">
                @fullTask.Description
            </p>
        </div>
    </div>


    if (fullTask.MaterialsId != null)
    {
        <div class="card">
            <div class="card-header">
                Additional materials:
            </div>
            <div class="card-body">
                @if (isOnline)
                {
                    <div class="m-2">
                        <MaterialItem materialId=fullTask.MaterialsId
                        showRemoveFile="false"
                        showDownloadFile="true"
                        showAddingFile="false" />
                    </div>
                }else{
                    <div class="alert alert-warning text-center" role="alert">
                        <i class="bi bi-exclamation-triangle"></i> Materials are avaliable only in online mode
                    </div>
                }

            </div>
        </div>


    }
    <div class="card">
        <div class="card-header">
            Other details:
        </div>
        <div class="card-body">
            <p class="card-text">Category: @(categories.FirstOrDefault(c => c.Id == fullTask.CategoryId)?.Name ?? "No category")</p>
            <p class="card-text">Assignment Date: @fullTask.AssignmentDate.ToString("g")</p>
            @if (fullTask.Deadline.HasValue)
            {
                <p class="card-text">Deadline Date: @fullTask.Deadline.Value.ToString("g")</p>
            }
            else
            {
                <p class="card-text">No deadline set.</p>
            }
            @if(fullTask.Status == StatusEnum.Done)
            {
                <p class="card-text">Finalization Date: @fullTask.FinalizationDate.Value.ToString("g")</p>
            }
            <p class="card-text">Priority: @fullTask.Priority</p>
            <div class="container text-start">
                <div class="row">
                    <div class="col">
                        <p>Spend Time: @fullTask.SpendTime</p>
                    </div>
                    @if(isOnline){
                        <div class="col">
                            <EditForm Model="spendTime" OnValidSubmit="AddTime">
                                <DataAnnotationsValidator />
                                <ValidationSummary />
                                <div class="input-group mb-3">
                                    <InputNumber class="form-control" placeholder="Material's name" @bind-Value="spendTime" />
                                    <button class="btn btn-primary" type="submit">
                                        Add Time
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    }
                </div>  
            </div>
            <div class="container text-start">
                <div class="row">
                    <div class="col">
                        <p>Status: @(getStatus(fullTask.Status))</p>
                    </div>
                    @if (isOnline)
                    {
                        if (fullTask.Status == StatusEnum.ToDo)
                        {
                            <div class="col">
                                <button class="btn btn-primary" @onclick="async() => await SetStatus(StatusEnum.InProgress)">
                                    In progress
                                </button>
                            </div>
                        }
                        else if (fullTask.Status == StatusEnum.InProgress)
                        {
                            <div class="col">
                                <button class="btn btn-primary" @onclick="async() => await SetStatus(StatusEnum.ToReview)">
                                    To Review
                                </button>
                            </div>
                        }
                        else if (fullTask.Status == StatusEnum.ToReview && isMentor)
                        {
                            <div class="col">
                                <button class="btn btn-primary" @onclick="async() => await SetStatus(StatusEnum.ReOpen)">
                                    Reopen
                                </button>
                            </div>
                            <div class="col">
                                <button class="btn btn-primary" @onclick="async() => await SetStatus(StatusEnum.Done)">
                                    Done
                                </button>
                            </div>
                        }
                        if (fullTask.Status == StatusEnum.ReOpen)
                        {
                            <div class="col">
                                <button class="btn btn-primary" @onclick="async() => await SetStatus(StatusEnum.ToReview)">
                                    To Review
                                </button>
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>



    if (isOnline && isMentor && fullTaskId.HasValue)
    {
        <div class="d-flex mt-3 mb-3 btn-group ">
            <button type="button" class="btn btn-primary" @onclick="GoToEditTask">Edit</button>
            <button type="button" class="btn btn-info" @onclick="() => NavigateToFeedback(fullTaskId.Value)">Feedback</button>
            <button type="button" class="btn btn-danger" @onclick="async() => await DeleteTask()">
                Delete
            </button>
        </div>
    }
    else if (isOnline && fullTaskId.HasValue)
    {
        <div class="d-flex mt-3 mb-3 btn-group ">
            <button type="button" class="btn btn-info" @onclick="() => NavigateToFeedback(fullTaskId.Value)">Feedback</button>
        </div>
    }


    if (!isOnline)
    {
        <div class="alert alert-primary" role="alert">
            <i class="bi bi-info-circle"></i> You are in offline mode
        </div>
    }
}


@code {
    [Parameter]
    public int? fullTaskId { get; set; }

    private bool isLoading = true;
    private bool isOnline = true;
    private bool isMentor = false;
    private FullTask fullTask;
    private UserDto currentUser;
    private List<CategoryDto> categories = new List<CategoryDto>();

    //private string newbieName;
    //private string mentorName;
    [Required]
    [Range(0.01, double.MaxValue, ErrorMessage = "Value must be greater than 0.")]
    private double spendTime;


    protected override async Task OnInitializedAsync()
    {
        currentUser = await DbContext.GetUserAsync();
        try
        {
            fullTask = await _httpClient.GetFromJsonAsync<FullTask>($"api/Task/GetFullTaskById/{fullTaskId}");
            categories = await _httpClient.GetFromJsonAsync<List<CategoryDto>>("api/Category/GetAll");
            var response = await _httpClient.GetAsync($"api/User/GetRole/{currentUser.Id}");
            string userRole = await response.Content.ReadAsStringAsync();
            if (userRole.ToLower() != "newbie")
                isMentor = true;
        }
        catch (HttpRequestException ex)
        {

            fullTask = await DbContext.GetFullTaskAsync((int)fullTaskId);
            isOnline = false;

        }
        finally
        {
            isLoading = false;
        }

    }
  
    private async Task AddTime()
    {
        FullTask newFullTask = fullTask;
        newFullTask.SpendTime += spendTime;
        var response = await _httpClient.PutAsJsonAsync($"api/Task/EditFullTask/{fullTaskId}/{currentUser.Id}", newFullTask);
        if (response.IsSuccessStatusCode)
        {
            fullTask = newFullTask;
            spendTime = 0;
            await DbContext.UpdateTaskAsync(fullTask);
            Toast.Make($"Time logged").Show();
        }

    }
    private string getStatus(StatusEnum status)
    {
        switch(status)
        {
            case StatusEnum.ToDo:
                return "to do";
            case StatusEnum.InProgress:
                return "in progress";
            case StatusEnum.ToReview:
                return "to review";
            case StatusEnum.ReOpen:
                return "reopen";
            case StatusEnum.Done:
                return "done";
        }
        return "";
    }
    private async Task SetStatus(StatusEnum status)
    {
        FullTask newFullTask = fullTask;
        newFullTask.Status = status;
        if (status == StatusEnum.Done)
            newFullTask.FinalizationDate = DateTime.Now;
        var response = await _httpClient.PatchAsJsonAsync($"api/Task/SetStatus/{fullTaskId}/{(int)status}", new{});
        if (response.IsSuccessStatusCode)
        {
            fullTask = newFullTask;
            await DbContext.UpdateTaskAsync(fullTask);
            Toast.Make($"Status changed").Show();
        }
    }
    private void GoToEditTask()
    {
        NavigationManager.NavigateTo($"/tasks/edit/{fullTaskId}");
    }
    private async Task DeleteTask()
    {
        var popup = new ConfirmPopup($"Do you want to send this FAQ?", async (isConfirmed) =>
        {
            if (isConfirmed)
            {
                var response = await _httpClient.DeleteAsync($"api/Task/Delete/{fullTaskId}");
                if (response.IsSuccessStatusCode)
                {
                    Toast.Make($"Status changed").Show();
                    await DbContext.DeleteTaskAsync(fullTask);
                    NavigationManager.NavigateTo($"/tasks");
                }
            }
            else
            {
                Toast.Make("FAQ deletion canceled").Show();
            }
        });
        App.Current.MainPage.ShowPopup(popup);
        
    }
    private void NavigateToFeedback(int taskId)
    {
        try
        {
            var url = $"/feedback/add?resourceType={(int)ResourceTypeEnum.Task}&resourceId={taskId}";
            NavigationManager.NavigateTo(url);
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine($"Navigation error: {ex.Message}");
        }
    }
}
<style>
    .card{
        margin: 10px;
    }
</style>
