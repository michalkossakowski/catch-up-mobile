@page "/feedback"

@inject HttpClient _httpClient
@inject CatchUpLocalDb DbContext
@inject NavigationManager NavigationManager

@using catch_up_mobile.Dtos
@using catch_up_mobile.Enums
@using catch_up_mobile.SQLite
@using CommunityToolkit.Maui.Alerts

<div class="container text-center">
    <h3>Feedbacks</h3>
    @if (feedbacks == null)
    {
        <Loading />
    }
    else
    {
        if (offlineMode)
        {
            <div class="alert alert-primary" role="alert">
                You are working in offline mode
            </div>
        }

        <div class="accordion text-start mt-3 mb-3" id="accordionExample">
            @if (feedbacks.Count() == 0)
            {
                <div class="alert alert-secondary text-center" role="alert">
                    No feedbacks found
                </div>
            }
            @for (int i = 0; i < feedbacks.Count; i++)
            {
                var feedback = feedbacks[i];
                var collapseId = $"collapse{i}";
                var headingId = $"heading{i}";
                <div class="accordion-item">
                    <h2 class="accordion-header" id="@headingId">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                            <strong>@(i + 1). @feedback.Title</strong>
                        </button>
                    </h2>
                    <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headingId" data-bs-parent="#accordionExample">
                        <div class="accordion-body">
                            @if (isAdmin)
                            {
                                <strong>Sender:</strong>
                                <ul><li>@GetUserFullName(feedback.SenderId)</li></ul>

                            }
                            else
                            {
                                <strong>Receiver:</strong>
                                <ul><li>@GetUserFullName(feedback.ReceiverId)</li></ul>
                            }
                            <strong>Description:</strong>
                            <ul><li>@feedback.Description</li></ul>

                            <strong>Date:</strong>
                            <ul><li>@feedback.createdDate.ToString("dd MMM yyyy")</li></ul>

                            <strong>Resource type:</strong>
                            <ul><li>@feedback.ResourceType</li></ul>

                            <strong>Resource title:</strong>
                            <ul><li>@GetResourceTitle(feedback.ResourceType, feedback.ResourceId)</li></ul>
                            @if (isAdmin && !offlineMode)
                            {
                                <div>
                                    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal" @onclick="() => feedbackToDelete = feedback">
                                        Delete
                                    </button>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<div class="modal fade text-center" id="deleteConfirmationModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <h5>Are you sure you want to delete this Feedback ?</h5>
                <div class="card p-2"><strong>@feedbackToDelete?.Title</strong></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal" @onclick="ConfirmDeleteFeedback">Delete</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<FeedbackDto> feedbacks;
    private FeedbackDto feedbackToDelete;
    private bool offlineMode = true;
    private bool isAdmin = false;
    private List<FaqDto> faqs;
    private List<FullSchoolingDto> schoolingsFull;
    private List<FullTask> tasks;
    private List<UserDto> users;
    public Guid userId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            UserDto user = await DbContext.GetUserAsync();
            userId = user.Id;
            var userRoleResonse = await _httpClient.GetAsync($"api/User/GetRole/{userId}");
            isAdmin = await userRoleResonse.Content.ReadAsStringAsync() == "Admin";

            HttpResponseMessage responseFeedbacks;

            if (isAdmin)
            {
                responseFeedbacks = await _httpClient.GetAsync($"api/feedback/GetByReceiverId/{userId}", HttpCompletionOption.ResponseHeadersRead);
            }
            else
            {
                responseFeedbacks = await _httpClient.GetAsync($"api/feedback/GetBySenderId/{userId}", HttpCompletionOption.ResponseHeadersRead);
            }

            if (responseFeedbacks.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                feedbacks = new List<FeedbackDto>();
            }
            else if (responseFeedbacks.IsSuccessStatusCode)
            {
                feedbacks = await responseFeedbacks.Content.ReadFromJsonAsync<List<FeedbackDto>>();
                await DbContext.DeleteAllFeedbacksAsync();

                foreach (var feedback in feedbacks)
                    await DbContext.AddFeedbackAsync(feedback);
            }

            HttpResponseMessage responseFaqs = await _httpClient.GetAsync("api/faq/GetAll", HttpCompletionOption.ResponseHeadersRead);

            if (responseFaqs.IsSuccessStatusCode)
            {
                faqs = await responseFaqs.Content.ReadFromJsonAsync<List<FaqDto>>();
                await DbContext.DeleteAllFaqsAsync();
                foreach (var faq in faqs)
                    await DbContext.AddFaqAsync(faq);
            }
            else
            {
                faqs = await DbContext.GetFaqsAsync();
            }

            HttpResponseMessage responseSchoolings = await _httpClient.GetAsync("api/schooling/GetAllFull", HttpCompletionOption.ResponseHeadersRead);

            if (responseSchoolings.IsSuccessStatusCode)
            {
                schoolingsFull = await responseSchoolings.Content.ReadFromJsonAsync<List<FullSchoolingDto>>();
            }

            HttpResponseMessage responseTasks = await _httpClient.GetAsync("api/task/GetAllFullTasks", HttpCompletionOption.ResponseHeadersRead);

            if (responseTasks.IsSuccessStatusCode)
            {
                tasks = await responseTasks.Content.ReadFromJsonAsync<List<FullTask>>();
            }

            HttpResponseMessage responseUsers = await _httpClient.GetAsync("api/user/GetAll", HttpCompletionOption.ResponseHeadersRead);

            if (responseUsers.IsSuccessStatusCode)
            {
                users = await responseUsers.Content.ReadFromJsonAsync<List<UserDto>>();
                await DbContext.ClearUserAsync();
            }
            else
            {
                var currentUser = await DbContext.GetUserAsync();
                users = currentUser != null ? new List<UserDto> { currentUser } : new List<UserDto>();
            }

            offlineMode = false;
        }
        catch (HttpRequestException)
        {
            feedbacks = await DbContext.GetFeedbacksAsync();
            offlineMode = true;
        }
    }

    private string GetUserFullName(Guid userId)
    {
        var user = users?.FirstOrDefault(u => u.Id == userId);
        return user != null ? $"{user.Name} {user.Surname}" : "Unknown User";
    }

    private string GetResourceTitle(ResourceTypeEnum resourceType, int resourceId)
    {
        if (resourceType == ResourceTypeEnum.Faq)
        {
            var faq = faqs?.FirstOrDefault(f => f.Id == resourceId);
            return faq?.Question ?? "No title";
        }
        else if (resourceType == ResourceTypeEnum.Schooling){
            var schooling = schoolingsFull?
                .Select(f => f.Schooling)
                .FirstOrDefault(s => s.Id == resourceId);
            return schooling?.Title ?? "No title";
        }
        else if (resourceType == ResourceTypeEnum.Task)
        {
            var task = tasks?.FirstOrDefault(f => f.Id == resourceId);
            return task?.Title ?? "No title";
        }

        return "No title";
    }

    private async Task ConfirmDeleteFeedback()
    {
        if (feedbackToDelete != null)
        {
            await _httpClient.DeleteAsync($"api/feedback/delete/{feedbackToDelete.Id}");
            await DbContext.DeleteFeedbackAsync(feedbackToDelete);
            feedbacks.Remove(feedbackToDelete);
            feedbackToDelete = null;
            await Toast.Make("Feedback successfully deleted").Show();
        }
    }
}
