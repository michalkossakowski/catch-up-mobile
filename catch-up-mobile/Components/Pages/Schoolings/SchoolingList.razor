@using CommunityToolkit.Maui.Alerts
@using CommunityToolkit.Maui.Views

@using catch_up_mobile.Dtos
@using catch_up_mobile.SQLite

@inject HttpClient _httpClient
@inject CatchUpLocalDb _localDb
@inject NavigationManager NavigationManager

@page "/schoolingList"

<div class="container mb-3">
    <h2 class="text-center">List of Schoolings</h2>

    @if (fullSchoolings == null)
    {
        <div class="text-center">
            <Loading/>
        </div>
    }
    else
    {
        <div class="text-center">
            <input class="form-control" placeholder="Search by title" @oninput="OnSearchQueryChanged">
            <h4 class="mt-3">Filtr by Category</h4>
            <select class="form-select" @onchange="OnCategoryChanged">
                <option value="">Select Category</option>
                @foreach (var category in availableCategories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>
        if (offlineMode)
        {
            <div class="alert alert-primary" role="alert">
                You are working in offline mode
            </div>
        }

        <div class="accordion text-start mt-3 mb-3" id="accordionSchoolingList">
            @if (filteredSchoolings.Count() == 0)
            {
                <div class="alert alert-warning" role="alert">
                    No schoolings found
                </div>
            }
            @for (int i = 0; i < filteredSchoolings.Count; i++)
            {
                var schooling = filteredSchoolings[i].Schooling;
                var category = filteredSchoolings[i].Category;

                var collapseId = $"collapse{i}";
                var headingId = $"heading{i}";

                <div class="accordion-item">
                    <h2 class="accordion-header" id="@headingId">
                        <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                            <strong>@(i + 1). @schooling.Title</strong>
                        </button>
                    </h2>
                    <div id="@collapseId" class="accordion-collapse collapse" aria-labelledby="@headingId" data-bs-parent="#accordionSchoolingList">
                        <div class="accordion-body">
                            <p class="fs-3 fw-bold">Category: @category.Name</p>
                            <p class="fs-5 fw-bold">Priority: @schooling.Priority</p>
                            <p>@schooling.Description</p>

                            <div class="d-flex justify-content-between btn-group" role="group">
                                <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#schoolingDetailsModal" @onclick="() => SeeDetails(schooling.Id)">See More</button>
                                @if (isAdmin && !offlineMode)
                                {
                                    <button type="button" class="btn btn-warning" @onclick="() => OpenSchoolingEdit(schooling.Id)">Edit</button>
                                    <button type="button" class="btn btn-danger"  @onclick="() => DeleteSchooling(schooling.Id)">Delete</button>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
        if (isAdmin && !offlineMode)
        {
            <div class="d-grid mx-auto">
                <button type="button" class="btn btn-success" @onclick="OpenSchoolingAdd">Add new Schooling</button>
            </div>
        }
        else
        {
            <div class="alert alert-warning" role="alert">
                You cannot add/edit/delete Schoolings in offline mode
            </div>
        }
    }
    <SchoolingDetailsModal fullSchooling="@selectedSchooling" />
</div>

@code {
    private List<FullSchoolingDto> fullSchoolings;
    private FullSchoolingDto selectedSchooling;
    private List<FullSchoolingDto> filteredSchoolings;
    private List<CategoryDto> availableCategories = new List<CategoryDto>();

    private string searchQuery = string.Empty;
    private int? selectedCategoryId = null;
    private bool offlineMode = true;
    private bool isAdmin = true; // Waiting for ADMIN
    protected override async Task OnInitializedAsync()
    {
        await LoadSchoolings();
        await LoadCategories();
    }

    private async Task LoadSchoolings()
    {
        try
        {
            fullSchoolings = await _httpClient.GetFromJsonAsync<List<FullSchoolingDto>>($"api/schooling/GetAllFull");
            FilterSchoolings();
            offlineMode = false;
        }
        catch (Exception ex)
        {
            offlineMode = true;
            await Toast.Make($"Schooling fetching error: {ex.Message}").Show();
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            availableCategories = await _httpClient.GetFromJsonAsync<List<CategoryDto>>($"api/category/GetAll");
        }
        catch (Exception ex)
        {
            await Toast.Make($"Category fetching error: {ex.Message}").Show();
        }
    }

    private void FilterSchoolings()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredSchoolings = fullSchoolings.ToList();
        }
        else
        {
            filteredSchoolings = fullSchoolings
                .Where(s => s.Schooling.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }

        if (selectedCategoryId.HasValue)
        {
            filteredSchoolings = filteredSchoolings
                .Where(s => s.Category.Id == selectedCategoryId.Value)
                .ToList();
        }
    }
    private void OpenSchoolingAdd()
    {
        NavigationManager.NavigateTo($"/schooling/edit/");
    }

    private void OpenSchoolingEdit(int schoolingId)
    {
        NavigationManager.NavigateTo($"/schooling/edit/{schoolingId}");
    }
    private void SeeDetails(int schoolingId)
    {
        selectedSchooling = fullSchoolings.FirstOrDefault(s => s.Schooling.Id == schoolingId);
    }
    private async Task DeleteSchooling(int schoolingId)
    {
        var popup = new ConfirmPopup($"Do you want to delete this schooling?", async (isConfirmed) =>
        {
            if (isConfirmed)
            {
                await _httpClient.DeleteAsync($"api/schooling/DeleteSchooling/{schoolingId}");

                var itemToRemove = fullSchoolings.FirstOrDefault(fs => fs.Schooling.Id == schoolingId);
                if (itemToRemove != null)
                {
                    fullSchoolings.Remove(itemToRemove);
                    await Toast.Make("Schooling successfully deleted").Show();

                    StateHasChanged();
                }
            }
        });
        App.Current.MainPage.ShowPopup(popup);
    }
    private void OnSearchQueryChanged(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        FilterSchoolings();
    }

    private void OnCategoryChanged(ChangeEventArgs e)
    {
        var selectedValue = e.Value?.ToString();
        selectedCategoryId = string.IsNullOrEmpty(selectedValue) ? null : int.Parse(selectedValue);

        FilterSchoolings();
    }
}
