@page "/materialItem/{materialId:int?}"
@using System.Diagnostics
@using CommunityToolkit.Maui.Alerts
@using CommunityToolkit.Maui.Storage
@using catch_up_mobile.Dtos

@inject HttpClient _httpClient

<section>
    @if (material != null)
    {
        <h2>@material.Name</h2>
        <ul class="list-group">
            @foreach (var file in material.Files)
            {
                <li class="list-group-item d-flex justify-content-between align-items-start">
                    @file.Name
                    <div>
                        @if (showRemoveFile)
                        {
                            <a class="pe-2" @onclick="() => RemoveFile(file.Id)">
                                <i class="bi bi-trash3 deleteIcon"></i>
                            </a>
                        }
                        @if (showDownloadFile)
                        {
                            <a @onclick="() => DownloadFile(file.Id)">
                                <i class="bi bi-file-earmark-arrow-down downloadIcon"></i>
                            </a>
                        }
                    </div>
                </li>
            }
        </ul>
        @if (showAddingFile)
        {
            <span>showAddingFile</span>
        }
    }
    else
    {
        <div class="input-group mb-3">
            <input type="text" placeholder="Material's name" class="form-control" @bind="materialName" />
            <button class="btn btn-outline-secondary" type="button" @onclick="CreateMaterial">
                Create
            </button>
        </div>
    }
</section>
@code {
    [Parameter] public int? materialId { get; set; }
    [Parameter] public bool showRemoveFile { get; set; } = false;
    [Parameter] public bool showDownloadFile { get; set; } = false;
    [Parameter] public bool showAddingFile { get; set; } = false;
    [Parameter] public EventCallback<int> materialCreated { get; set; }

    private MaterialDto material { get; set; }
    private string? materialName { get; set; }
    private string? errorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (materialId == null || materialId == 0)
            material = null;
        else
            await LoadMaterial();
    }

    private async Task LoadMaterial()
    {
        try
        {
            material = await _httpClient.GetFromJsonAsync<MaterialDto>($"api/material/GetWithFiles/{materialId.Value}");
        }
        catch (Exception ex)
        {
            await Toast.Make($"Material fetching error: {ex.Message}").Show();
        }
    }

    private async Task CreateMaterial()
    {
        if (!string.IsNullOrEmpty(materialName))
        {
            try
            {
                var newMaterial = new MaterialDto { Name = materialName };
                var response = await _httpClient.PostAsJsonAsync($"api/material/Create", newMaterial);
                var responseContent = await response.Content.ReadFromJsonAsync<MaterialDto>();
                if (responseContent != null)
                {
                    materialId = responseContent.Id;
                    materialName = responseContent.Name;
                    material = responseContent;

                    if (materialId.HasValue)
                        await materialCreated.InvokeAsync(materialId.Value);
                }
            }
            catch (Exception ex)
            {
                await Toast.Make($"Error in creating material {ex.Message}").Show();
            }
        }
    }
    private async Task RemoveFile(int fileId)
    {
        try
        {
            if (material != null)
            {
                await _httpClient.PostAsJsonAsync($"api/material/RemoveFile/{materialId}/{fileId}", new { });
                material.Files = material.Files.Where(f => f.Id != fileId).ToList();
            }
        }
        catch (Exception ex)
        {
            await Toast.Make($"Error removing file {ex.Message}").Show();
        }
    }

    private async Task DownloadFile(int fileId)
    {
        try
        {
            var response = await _httpClient.GetAsync($"api/file/Download/{fileId}", HttpCompletionOption.ResponseHeadersRead);
            var file = material?.Files.FirstOrDefault(f => f.Id == fileId);

            if (response.IsSuccessStatusCode && file != null)
            {
                await using var stream = await response.Content.ReadAsStreamAsync();

                var fileName = $"{file.Name}";
                // var saverProgress = new Progress<double>(percentage => ProgressBar.ProgressProperty = percentage);
                var fileSaverResult = await FileSaver.Default.SaveAsync(fileName, stream);
                // var fileSaverResult = await FileSaver.Default.SaveAsync(fileName, stream, saverProgress);


                if (fileSaverResult.IsSuccessful)
                {
                    await Toast.Make($"The file was saved successfully to: {fileSaverResult.FilePath}").Show();
                }
                else
                {
                    await Toast.Make($"The file was not saved successfully. Error: {fileSaverResult.Exception.Message}").Show();
                }
            }
            else
            {
                await Toast.Make($"Failed to download the file. Server returned: {response.StatusCode}").Show();
            }
        }
        catch (Exception ex)
        {
            await Toast.Make($"Error downloading or saving the file: {ex.Message}").Show();
        }
    }
}
