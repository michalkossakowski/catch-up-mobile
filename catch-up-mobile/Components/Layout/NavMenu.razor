@using Microsoft.AspNetCore.SignalR.Client
@using Plugin.Firebase.CloudMessaging
@using System.Net.Http.Headers
@using catch_up_mobile.Components.Pages.MaterialManager
@using catch_up_mobile.Dtos
@using catch_up_mobile.SQLite
@using catch_up_mobile.Services
@using catch_up_mobile.Providers

@inject CatchUpDbContext _dbContext
@inject NavigationManager NavigationManager
@inject HttpClientProvider _httpClientProvider
@inject SignalRService SignalRService
@inject NotificationStateService NotificationStateService

<div class="top-row navbar navbar-dark">
    <div class="container-fluid navbar-box">
        <a class="navbar-brand" href="/">catchUp</a>
        <b class="navbar-username">@userName</b>
        <NavLink class="navbar-bell" href="notifications" @onclick="MarkAsRead">
            @if (NotificationStateService.UnreadNotification)
            {
                <i class="bi-chat-left-dots-fill new-notification-dot"></i>
            }
            <i class="bi-bell fs-5"></i>
        </NavLink>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <nav class="flex-column nav-items-box">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">
                <i class="bi-house-door-fill fs-5" aria-hidden="true"></i> <span>Home</span> 
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="notifications" @onclick="MarkAsRead">
                <i class="bi-bell fs-5" aria-hidden="true"></i> <span>Notifications</span>
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="faq">
                <i class="bi-question-circle fs-5" aria-hidden="true"></i> <span>FAQ</span> 
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="taskcontent">
                <i class="bi-list-task fs-5" aria-hidden="true"></i> <span>Task Content</span> 
            </NavLink>
        </div>
        @if (!(userPosition == "Newbie"))
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="assigntask">
                    <i class="bi-person-plus-fill fs-5" aria-hidden="true"></i> <span>Assign Task</span> 
                </NavLink>
            </div>
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="tasks">
                <i class="bi-person-lines-fill fs-5" aria-hidden="true"></i> <span>Tasks</span> 
            </NavLink>
        </div>
        @if (userPosition == "Admin" || userPosition == "HR")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="assignment">
                    <i class="bi-link fs-5" aria-hidden="true"></i> <span>Assignment</span> 
                </NavLink>
            </div>
        }
        @if (userPosition != "Newbie")
        {
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="addmaterial">
                    <i class="bi-journal-plus fs-5" aria-hidden="true"></i> <span>Add Material</span> 
                </NavLink> 
            </div>
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="schoolingList">
                <i class="bi-book fs-5" aria-hidden="true"></i> <span>Schoolings</span> 
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="feedback">
                <i class="bi-pencil-square fs-5" aria-hidden="true"></i> <span>Feedbacks</span> 
            </NavLink>
        </div>
        @if (userPosition == "Admin")
        {        
            <div class="nav-item px-3">
                <NavLink class="nav-link" href="localization-panel-admin">
                    <i class="bi-geo-alt-fill fs-5" aria-hidden="true"></i> <span>Localization Panel</span> 
                </NavLink>
            </div>
        }
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="newbies">
                <i class="bi-list-task fs-5" aria-hidden="true"></i> <span>Newbies List</span> 
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="settings">
                <i class="bi-gear fs-5" aria-hidden="true"></i> <span>Settings</span> 
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" @onclick="HandleLogout">
                <i class="bi-box-arrow-right fs-5" aria-hidden="true"></i> <span>Logout</span> 
            </NavLink>
        </div>
    </nav>
</div>

@code {
    public string userName = "";
    private string userPosition = "";
    private HttpClient _httpClient;
    private HubConnection _connection;

    protected override async Task OnInitializedAsync()
    {
        _httpClient = _httpClientProvider.GetHttpClient();
        await _httpClientProvider.SetAccessTokenFromDb();

        UserDto user = await _dbContext.GetUserAsync();
        userName = $"{user.Name} {user.Surname}";

        try
        {
            var response = await _httpClient.GetAsync($"api/User/GetRole/{user.Id}");
            userPosition = await response.Content.ReadAsStringAsync();
        }
        catch(Exception ex)
        {
            userPosition = "Offline";
        }

        try
        {
            await FetctNotifcations();
        }
        catch(Exception ex)
        {
            Console.WriteLine("Cannot get notifications: " + ex);
        }

        try
        {
            await SignalRService.StartAsync();

            _connection = SignalRService.GetHubConncetion();
            _connection.On<NotificationDto>("ReceiveNotification", async (notification) =>
            {
                NotificationStateService.SetUnreadNotification(true);
                await _dbContext.AddNotificationAsync(notification);
                await InvokeAsync(StateHasChanged);
            });
        }
        catch(Exception ex)
        {
            Console.WriteLine("Cannot connect to singalR: " + ex);
        }

        NotificationStateService.OnChange += async () => await InvokeAsync(StateHasChanged);
    }


    private async Task HandleLogout()
    {
        try
        {
            if (_connection != null)
            {
                _connection.Remove("ReceiveNotification");
            }
            await SignalRService.StopAsync();
        }
        catch(Exception ex)
        {
            Console.WriteLine("Cannot disconnect to singalR: " + ex);
        }

#if ANDROID
    try
    {
    await UnregisterFirebaseToken();
    }
    catch(Exception ex)
    {
    Console.WriteLine("Cannot unregister firebase token" + ex);
        }
#endif

        await _dbContext.ClearUserAsync();
        await _dbContext.DeleteAccessToken();
        await _dbContext.DeleteAllNotificationsAsync();

        NavigationManager.NavigateTo("/", true);
    }

#if ANDROID
    private async Task UnregisterFirebaseToken()
    {
    await CrossFirebaseCloudMessaging.Current.CheckIfValidAsync();
    var firebaseToken = await CrossFirebaseCloudMessaging.Current.GetTokenAsync();
    await _httpClient.PostAsJsonAsync("api/Auth/UnregisterFirebaseToken", firebaseToken);
    }
#endif

    private async Task FetctNotifcations()
    {
        var response = await _httpClient.GetAsync("/api/Notification/GetByUserToken?pageNumber=1&pageSize=20");
        if (response.IsSuccessStatusCode)
        {
            var notificationsResponse = await response.Content.ReadFromJsonAsync<NotificationResponse>();
            await _dbContext.DeleteAllNotificationsAsync();
            await _dbContext.AddNotificationsAsync(notificationsResponse.Notifications);
            await _dbContext.SaveNotificationCount(notificationsResponse.TotalCount);

            NotificationStateService.SetUnreadNotification(notificationsResponse.Notifications.Any(n => !n.IsRead));
        }
        else
        {
            Console.WriteLine($"Failed to fetch notifications: {response.StatusCode}");
        }
    }

    private async Task MarkAsRead()
    {
        try
        {
            NotificationStateService.SetUnreadNotification(false);
            var respone = await _httpClient.GetAsync($"/api/Notification/ReadNotifications");
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Failed to read notifications: {ex}");
        }

        await InvokeAsync(StateHasChanged);
    }
}