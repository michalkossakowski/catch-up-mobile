@page "/login"

@inject HttpClient _httpClient
@inject NavigationManager NavigationManager
@inject CatchUpLocalDb DbContext

@using System.Text.Json
@using System.IdentityModel.Tokens.Jwt
@using catch_up_mobile.Dtos
@using catch_up_mobile.SQLite

@if (isLoading)
{
    <div class="text-center">
        <Loading />
        <p>Logging in...</p>
    </div>
}
else
{
<div class="vh-100 align-items-center justify-content-center">
    <div class="w-100">
        <div class="card border-0">
            <div class="card-body p-4">
                <h3 class="card-title text-center mb-4">Login</h3>
                <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label class="form-label">Email:</label>
                        <InputText @bind-Value="loginModel.Email" class="form-control form-control-lg" />
                        <ValidationMessage For="@(() => loginModel.Email)" />
                    </div>

                    <div class="form-group mt-4">
                        <label class="form-label">Password:</label>
                        <InputText type="password" @bind-Value="loginModel.Password" class="form-control form-control-lg" />
                        <ValidationMessage For="@(() => loginModel.Password)" />
                    </div>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-4">@errorMessage</div>
                    }

                    <button type="submit" class="btn btn-primary btn-lg w-100 mt-4">Login</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>
}
@code {
    private class LoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }

    private LoginModel loginModel = new();
    private string errorMessage;
    private bool isLoading;

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        isLoading = true;

        try
        {
            var response = await _httpClient.PostAsJsonAsync("api/Auth/Login", loginModel);

            if (response.IsSuccessStatusCode)
            {
                var tokens = await response.Content.ReadFromJsonAsync<TokenResponse>();

                if (tokens == null)
                {
                    errorMessage = "Invalid response from server";
                    return;
                }

                try
                {
                    // decode refresh token to get user ID
                    var handler = new JwtSecurityTokenHandler();
                    var token = handler.ReadJwtToken(tokens.RefreshToken);
                    var userId = token.Claims.First(c => c.Type == "nameid").Value;

                    // get user details
                    var userResponse = await _httpClient.GetFromJsonAsync<UserDto>($"api/User/GetById/{userId}");

                    if (userResponse != null)
                    {
                        // user is being saved into local database
                        await DbContext.SaveUserAsync(new UserDto
                            {
                                Id = userResponse.Id,
                                Name = userResponse.Name,
                                Surname = userResponse.Surname,
                                Email = userResponse.Email,
                                Position = userResponse.Position,
                            });

                        NavigationManager.NavigateTo("/", true); // go to home page
                    }
                    else
                    {
                        errorMessage = "Failed to retrieve user details";
                    }
                }
                catch (Exception ex)
                {
                    errorMessage = "Error processing user data";
                }
            }
            else
            {
                errorMessage = "Invalid login credentials";
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.ToString();
        }
        finally
        {
            isLoading = false;
        }
    }

    private class TokenResponse
    {
        public string AccessToken { get; set; }
        public string RefreshToken { get; set; }
    }
}