@page "/taskcontent"

@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject CatchUpDbContext _dbContext
@using catch_up_mobile.Dtos
@using Microsoft.Maui.Devices.Sensors
@using catch_up_mobile.SQLite
@using Plugin.LocalNotification
@implements IDisposable

<h3>Task Content</h3>

@if (offlineMode)
{
    <div class="alert alert-primary" role="alert">
        You are working in offline mode
    </div>
}

@if (awaitingRole)
{
    <div class="text-center"><Loading/></div>
}
else if (!canEdit)
{
    <div class="alert alert-info">You don't have permissions to add Task Content.</div>
}
else
{
<EditForm Model="@newTaskContent" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="title" class="form-label">Title</label>
        <InputText id="title" class="form-control" @bind-Value="newTaskContent.Title" />
    </div>

    <div class="mb-3">
        <label for="description" class="form-label">Description</label>
        <InputTextArea id="description" class="form-control" @bind-Value="newTaskContent.Description" />
    </div>
 
    <div class="mb-3">
        <label for="category" class="form-label">Category</label>
        <InputSelect id="category" class="form-control" @bind-Value="newTaskContent.CategoryId">
            <option value="">Select a category</option>
            @foreach (var category in categories)
            {
                <option value="@category.Id">@category.Name</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="material" class="form-label">Material</label>
        <InputSelect id="material" class="form-control" @bind-Value="newTaskContent.MaterialsId">
            <option value="">Select a material</option>
            @foreach (var material in materials)
            {
                <option value="@material.Id">@material.Name</option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Add Task Content</button>
    </EditForm>
}

<h4 class="mt-5">Task Content List</h4>
@if (taskContents == null)
{
    <div class="text-center">
        <Loading/>
    </div>
}
else
{
    @if (offlineMode)
    {
        <div class="alert alert-warning text-center" role="alert">
            <i class="bi bi-exclamation-triangle"></i> You are working in offline mode. You can only view task list.
        </div>
        
        @if (taskContents.Any())
        {
            <table class="table table-striped table-responsive">
                <thead>
                    <tr>
                        <th class="text-center align-middle col-title">Title</th>
                        <th class="text-center align-middle col-category">Category</th>
                        <th class="text-center align-middle">Description</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var task in taskContents)
                    {
                        <tr>
                            <td class="text-center align-middle">@task.Title</td>
                            <td class="text-center align-middle">
                                @(categories.FirstOrDefault(c => c.Id == task.CategoryId)?.Name ?? "No category")
                            </td>
                            <td class="text-center align-middle">@task.Description</td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <div class="alert alert-secondary text-center" role="alert">
                Task list is empty
            </div>
        }
    }
    else
    {
        <table class="table table-striped table-responsive">
            <thead>
                <tr>
                    <th class="text-center align-middle col-title">Title</th>
                    <th class="text-center align-middle col-category">Category</th>
                    <th class="text-center align-middle col-actions">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var task in taskContents)
                {
                    <tr>
                        <td class="text-center align-middle">@task.Title</td>
                        <td class="text-center align-middle">
                            @(categories.FirstOrDefault(c => c.Id == task.CategoryId)?.Name ?? "No category")
                        </td>
                        <td class="text-center align-middle">
                            <div class="d-flex justify-content-center gap-3">
                                <button class="btn btn-link p-0" @onclick="() => HandleView(task.Id, task.CategoryId)">
                                    <i class="bi bi-eye text-info"></i>
                                </button>
                                @if (canEdit)
                                {
                                    <button class="btn btn-link p-0" @onclick="() => HandleEdit(task)">
                                        <i class="bi bi-pencil-square text-primary"></i>
                                    </button>
                                    <button class="btn btn-link p-0" @onclick="() => HandleDelete(task.Id)">
                                        <i class="bi bi-trash text-danger"></i>
                                    </button>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private TaskContentDto newTaskContent = new TaskContentDto();
    private List<CategoryDto> categories = new List<CategoryDto>();
    private List<MaterialDto> materials = new List<MaterialDto>();
    private List<TaskContentDto> taskContents = new List<TaskContentDto>();
    private IAccelerometer? accelerometer;
    private bool isAccelerometerReady;
    private DateTime lastShakeTime = DateTime.MinValue;
    private const double ShakeThreshold = 2.0;
    private const int ShakeCooldownMs = 1000;
    private bool offlineMode = false;
    private bool isApplicationActive = true;
    private bool canEdit = false;
    private bool awaitingRole = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await InitializeAccelerometer();
            await base.OnInitializedAsync();
            
            taskContents = null;
            
            try
            {
                var user = await _dbContext.GetUserAsync();
                var role = await Http.GetStringAsync($"api/User/GetRole/{user.Id}");
                canEdit = role != null && role != "Newbie";
            }
            catch
            {
                canEdit = false;
            }
            finally
            {
                awaitingRole = false;
            }

            var categoriesTask = Http.GetFromJsonAsync<List<CategoryDto>>("api/Category/GetAll");
            var materialsTask = Http.GetFromJsonAsync<List<MaterialDto>>("api/Material/GetAllMaterials");
            var tasksPagedTask = Http.GetFromJsonAsync<TaskContentPagedResponse>("api/TaskContent/GetAll/1/100");
            
            await Task.WhenAll(categoriesTask, materialsTask, tasksPagedTask);
            
            categories = await categoriesTask ?? new List<CategoryDto>();
            materials = await materialsTask ?? new List<MaterialDto>();
            var tasksPaged = await tasksPagedTask;
            taskContents = tasksPaged?.taskContents ?? new List<TaskContentDto>();

            await _dbContext.DeleteAllTaskContentsAsync();
            foreach (var task in taskContents)
            {
                await _dbContext.AddTaskContentAsync(task);
            }
            
            await _dbContext.DeleteAllCategoriesAsync();
            foreach (var cat in categories)
            {
                await _dbContext.AddCategoryAsync(cat);
            }
            
            offlineMode = false;
        }
        catch (HttpRequestException)
        {
            offlineMode = true;

            taskContents = await _dbContext.GetTaskContentsAsync();
            categories = await _dbContext.GetCategoriesAsync();
            materials = await _dbContext.GetMaterialsAsync();
        }
        catch (Exception)
        {
            offlineMode = true;
            taskContents = await _dbContext.GetTaskContentsAsync();
            categories = await _dbContext.GetCategoriesAsync();
            materials = await _dbContext.GetMaterialsAsync();
        }
    }

    private async Task InitializeAccelerometer()
    {
        try
        {
            accelerometer = Accelerometer.Default;
            if (accelerometer.IsSupported)
            {
                accelerometer.ReadingChanged += Accelerometer_ReadingChanged;
                accelerometer.Start(SensorSpeed.UI);
                isAccelerometerReady = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to initialize accelerometer: {ex.Message}");
        }
    }

    private async void Accelerometer_ReadingChanged(object sender, AccelerometerChangedEventArgs e)
    {
        if (!isApplicationActive) return;
        
        var reading = e.Reading;
        var acceleration = Math.Sqrt(
            reading.Acceleration.X * reading.Acceleration.X +
            reading.Acceleration.Y * reading.Acceleration.Y +
            reading.Acceleration.Z * reading.Acceleration.Z
        );

        if (acceleration > ShakeThreshold && 
            (DateTime.Now - lastShakeTime).TotalMilliseconds > ShakeCooldownMs)
        {
            lastShakeTime = DateTime.Now;
            await InvokeAsync(async () =>
            {
                taskContents = null;
                StateHasChanged(); 
                await Task.Delay(100);
                await LoadTaskContents(showNotification: true);
                StateHasChanged();
            });
        }
    }

    // Lifecycle methods
    protected override void OnInitialized()
    {
        base.OnInitialized();
        isApplicationActive = true;
    }

    public void Dispose()
    {
        if (isAccelerometerReady && accelerometer != null)
        {
            accelerometer.ReadingChanged -= Accelerometer_ReadingChanged;
            accelerometer.Stop();
        }
    }

    private async Task LoadTaskContents(bool showNotification = false)
    {
        try
        {
            var paged = await Http.GetFromJsonAsync<TaskContentPagedResponse>("api/TaskContent/GetAll/1/100");
            taskContents = paged?.taskContents ?? new List<TaskContentDto>();
            if (taskContents == null)
            {
                taskContents = new List<TaskContentDto>();
            }

            await _dbContext.DeleteAllTaskContentsAsync();
            foreach (var task in taskContents)
            {
                await _dbContext.AddTaskContentAsync(task);
            }

            offlineMode = false;

            if (showNotification)
            {
                if (await LocalNotificationCenter.Current.AreNotificationsEnabled() == false)
                {
                    await LocalNotificationCenter.Current.RequestNotificationPermission();
                }

                var notification = new NotificationRequest
                {
                    Title = "Task List Refresh",
                    Description = "Task list has been refreshed successfully",
                    ReturningData = "TaskListRefresh",
                    NotificationId = 1
                };
                await LocalNotificationCenter.Current.Show(notification);
            }
        }
        catch (HttpRequestException)
        {
            offlineMode = true;
            taskContents = await _dbContext.GetTaskContentsAsync();
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            UserDto user = await _dbContext.GetUserAsync();
            newTaskContent.CreatorId = user.Id;

            var result = await Http.PostAsJsonAsync("api/TaskContent/Add", newTaskContent);

            if (result.IsSuccessStatusCode)
            {
                newTaskContent = new TaskContentDto();
                await LoadTaskContents(showNotification: false);
            }
            else
            {
                var errorMessage = await result.Content.ReadAsStringAsync();
                Console.Error.WriteLine($"Error: {result.StatusCode} - {errorMessage}");
                
                errorMessage = $"Operation failed: {result.StatusCode} - {errorMessage}";
                await JSRuntime.InvokeVoidAsync("alert", errorMessage);
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error in HandleValidSubmit: {ex}");
            await JSRuntime.InvokeVoidAsync("alert", "Failed to add task content");
        }
    }

    private void HandleEdit(TaskContentDto task)
    {
        NavigationManager.NavigateTo($"/taskcontent/edit/{task.Id}");
    }

    private async Task HandleDelete(int taskId)
    {
        var response = await Http.DeleteAsync($"api/TaskContent/Delete/{taskId}");
        if (response.IsSuccessStatusCode)
        {
            await LoadTaskContents();
        }
    }

    private void HandleView(int taskId, int? categoryId)
    {
        var categoryName = categoryId.HasValue ? categories.FirstOrDefault(c => c.Id == categoryId.Value)?.Name : null;
        var url = $"/taskcontent/{taskId}";
        if (!string.IsNullOrEmpty(categoryName))
        {
            url += $"?categoryName={Uri.EscapeDataString(categoryName)}";
        }
        NavigationManager.NavigateTo(url);
    }
}

@code {
    private class TaskContentPagedResponse
    {
        public List<TaskContentDto> taskContents { get; set; }
        public int totalCount { get; set; }
    }
}

<style>
    .table {
        width: 100%;
        table-layout: fixed;
    }

    .col-actions {
        width: 120px;
        min-width: 120px;
    }

    .col-category {
        width: 30%;
    }

    .col-title {
        width: calc(70% - 120px);
    }

    td {
        word-wrap: break-word;
        white-space: normal;
    }

    .gap-3 {
        gap: 1rem !important;
    }

    .btn-link {
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: 24px;
        height: 24px;
    }

    .bi {
        font-size: 1.2rem;
        line-height: 1;
    }
</style>