@page "/mentors/{newbieId:guid}"

@inject HttpClient _httpClient
@inject NavigationManager NavigationManager
@using catch_up_mobile.Dtos
@using CommunityToolkit.Maui.Alerts
@using System.Threading

<div class="container mt-5">
    <h2>List of Mentors Assign to</h2>
    <h2><b>@SelectedNewbieName @SelectedNewbieSurname</b></h2>
    <br />
    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Search by name or surname..." @bind="searchTerm" />
        <span style="cursor: pointer" class="input-group-text" @onclick="OnSearchClick">
            <i class="bi bi-search"></i>
        </span>
    </div>

    @if (mentors == null)
    {
        <div class="d-flex justify-content-center text-center">
        <Loading/>
        </div>
    }
    else if (mentors is not null && mentors.Count == 0)
    {
        <div class="d-flex justify-content-center text-center alert-warning">
            <h3>There are no mentors on the list</h3>
        </div>
    }
    else
    {
        <div>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th style="cursor: pointer;vertical-align: middle; white-space: nowrap;" @onclick='() => SortNewbies("Name")'>
                            Name<i class="bi bi-arrow-down-up"></i>
                        </th>
                        <th style="cursor: pointer;vertical-align: middle; white-space: nowrap;" @onclick='() => SortNewbies("Surname")'>
                            Surname<i class="bi bi-arrow-down-up"></i>
                        </th>
                        <th style="cursor: pointer;vertical-align: middle; white-space: nowrap;" @onclick='() => SortNewbies("Position")'>
                            Position<i class="bi bi-arrow-down-up"></i>
                        </th>
                        <th style="vertical-align: middle; white-space: nowrap;">
                            Actions
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (UserDto mentor in sortedMentors)
                    {
                        <tr style="cursor: pointer"
                            class="mentor-row @(mentor.Id == selectedNewbieId ? "table-active" : "")">
                            <td>@mentor.Name</td>
                            <td>@mentor.Surname</td>
                            <td>@mentor.Position</td>
                            <td>
                                <button class="btn btn-danger" @onclick="() => UnassignMentor(mentor.Id)">
                                    Unassign
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    [Parameter] public Guid NewbieId { get; set; }
    private List<UserDto> mentors;
    private List<UserDto> sortedMentors;
    private string sortOrder = "Name";
    private Guid selectedNewbieId;
    private bool sortAcs = true;
    private string searchTerm = string.Empty;
    private string searchClickedClass = "";
    private string SelectedNewbieName { get; set; }
    private string SelectedNewbieSurname { get; set; }
    private string SelectedNewbiePosition { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            var query = System.Web.HttpUtility.ParseQueryString(uri.Query);

            SelectedNewbieName = query["name"];
            SelectedNewbieSurname = query["surname"];
            SelectedNewbiePosition = query["position"];


            mentors = await _httpClient.GetFromJsonAsync<List<UserDto>>($"api/NewbieMentor/GetAssignmentsByNewbie/{NewbieId}");


            if (mentors == null || !mentors.Any())
            {
                mentors = new List<UserDto>();
                await Toast.Make("No mentors found for this newbie", CommunityToolkit.Maui.Core.ToastDuration.Long).Show();
            }

            sortedMentors = mentors;
        }
        catch (HttpRequestException httpEx)
        {
            await Toast.Make($"Network error: {httpEx.Message}", CommunityToolkit.Maui.Core.ToastDuration.Long).Show();
        }
        catch (Exception ex)
        {
            await Toast.Make($"An unexpected error occurred: {ex.Message}", CommunityToolkit.Maui.Core.ToastDuration.Long).Show();
        }
    }

    private void SortNewbies(string column)
    {
        if (sortOrder == column && sortAcs)
        {
            sortedMentors = sortedMentors.OrderByDescending(m => m.GetType().GetProperty(column).GetValue(m, null)).ToList();
            sortAcs = false;
        }
        else if (sortOrder == column && !sortAcs)
        {
            sortedMentors = sortedMentors.OrderBy(m => m.GetType().GetProperty(column).GetValue(m, null)).ToList();
            sortAcs = true;
        }
        else
        {
            sortedMentors = sortedMentors.OrderBy(m => m.GetType().GetProperty(column).GetValue(m, null)).ToList();
        }
        sortOrder = column;
        ShowSortNotification();
    }

    private async Task ShowSortNotification()
    {
        string direction = sortAcs ? "ascending" : "descending";
        string message = $"Sorted by {sortOrder} in {direction} order";
        await Toast.Make(message).Show();
    }

    private void OnSearchClick()
    {
        FilterNewbies();
        searchClickedClass = "clicked";
    }

    private void FilterNewbies()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            sortedMentors = mentors;
        }
        else
        {
            sortedMentors = mentors.Where(n =>
                n.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                n.Surname.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
    private async Task UnassignMentor(Guid mentorId)
    {
        await _httpClient.DeleteAsync($"api/NewbieMentor/Delete/{NewbieId}/{mentorId}");
        mentors = await _httpClient.GetFromJsonAsync<List<UserDto>>($"api/NewbieMentor/GetAssignmentsByNewbie/{NewbieId}");
        sortedMentors = mentors;
        StateHasChanged();
    }
}
