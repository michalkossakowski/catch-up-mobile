@page "/assign-mentor-to-newbie"
@inject HttpClient _httpClient
@inject NavigationManager NavigationManager
@using catch_up_mobile.Dtos
@using CommunityToolkit.Maui.Alerts
@using System.Threading
<style>
    td {
        white-space: normal;
        white-space: break-word;
    }

    th {
        white-space: normal;
        white-space: break-word;
    }
</style>
<div class="container mt-5">
    <h2>List of Newbies</h2>
    <h3>Click on the newbie you want to manage</h3>
    <div class="input-group mb-3">
        <input type="text" class="form-control" placeholder="Search by name or surname..." @bind="searchTerm" />
        <span style="cursor: pointer" class="input-group-text" @onclick="OnSearchClick">
            <i class="bi bi-search"></i>
        </span>
    </div>

    @if (newbies == null)
    {
        <div class="d-flex justify-content-center text-center">
        <Loading />
        </div>
    }
    else if (newbies.Count == 0)
    {
        <div class="d-flex justify-content-center text-center alert-warning">
            <h3>There are no newbies on the list</h3>
        </div>
    }
    else
    {
        <div>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th style="cursor: pointer; vertical-align: middle;" @onclick='() => SortNewbies("Name")'>
                            Name <i class="bi bi-arrow-down-up"></i>
                        </th>
                        <th style="cursor: pointer; vertical-align: middle; " @onclick='() => SortNewbies("Surname")'>
                            Surname <i class="bi bi-arrow-down-up"></i>
                        </th>
                        <th style ="cursor: pointer; vertical-align: middle;" @onclick='() => SortNewbies("Position")'>
                            Position <i class="bi bi-arrow-down-up"></i>
                        </th>
                        <th style="cursor: pointer; vertical-align: middle;" @onclick='() => SortNewbies("AssignCount")'>
                            Mentors Count <i class="bi bi-arrow-down-up"></i>
                        </th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (UserDto newbie in sortedNewbies)
                    {
                        <tr style="cursor: pointer"
                            @onclick="() => HandleNewbieClick(newbie.Id, newbie.Name, newbie.Surname, newbie.Position)"
                            class="mentor-row @(newbie.Id == selectedNewbieId ? "table-active" : "")">
                            <td>@newbie.Name</td>
                            <td>@newbie.Surname</td>
                            <td>@newbie.Position</td>
                            <td>@newbie.AssignCount</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    private List<UserDto> newbies;
    private List<UserDto> sortedNewbies;
    private string sortOrder = "Name";
    private Guid selectedNewbieId;
    private bool sortAcs = true;
    private string searchTerm = string.Empty;
    private string searchClickedClass = ""; 

    protected override async Task OnInitializedAsync()
    {
        try
        {
            newbies = await _httpClient.GetFromJsonAsync<List<UserDto>>("api/NewbieMentor/GetAllNewbies");
            foreach (UserDto newbie in newbies)
            {
                newbie.AssignCount = await _httpClient.GetFromJsonAsync<int>($"api/NewbieMentor/GetMentorCountByNewbie/{newbie.Id}");
            }
            sortedNewbies = newbies;
        }
        catch (Exception ex)
        {
            newbies = new List<UserDto>(); 
            sortedNewbies = newbies;
            await Toast.Make("Unable to load newbies. Please check your internet connection.").Show();
        }
    }

    private void SortNewbies(string column)
    {
        if (sortOrder == column && sortAcs)
        {
            sortedNewbies = sortedNewbies.OrderByDescending(m => m.GetType().GetProperty(column).GetValue(m, null)).ToList();
            sortAcs = false;
        }
        else if (sortOrder == column && !sortAcs)
        {
            sortedNewbies = sortedNewbies.OrderBy(m => m.GetType().GetProperty(column).GetValue(m, null)).ToList();
            sortAcs = true;
        }
        else
        {
            sortedNewbies = sortedNewbies.OrderBy(m => m.GetType().GetProperty(column).GetValue(m, null)).ToList();
        }
        sortOrder = column;
        ShowSortNotification();
    }

    private void HandleNewbieClick(Guid newbieId, string name, string surname, string position)
    {
        Toast.Make($"Section for {name} {surname}").Show();
        NavigationManager.NavigateTo($"/newbie-details/{newbieId}?name={name}&surname={surname}&position={position}");
    }

    private async Task ShowSortNotification()
    {
        string direction = sortAcs ? "ascending" : "descending";
        string message = $"Sorted by {sortOrder} in {direction} order";
        await Toast.Make(message).Show();
    }

    private void OnSearchClick()
    {
        FilterNewbies(); 
        searchClickedClass = "clicked"; 
    }

    private void FilterNewbies()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            sortedNewbies = newbies; 
        }
        else
        {
            sortedNewbies = newbies.Where(n =>
                n.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                n.Surname.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }
}
